name: Build and Release Workflow
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Get Go version from toolchain
        id: go-version
        run: |
          TOOLCHAIN_VERSION=$(grep -E '^toolchain go[0-9]+\.[0-9]+(\.[0-9]+)?$' go.mod | cut -d ' ' -f 2 | sed 's/^go//')
          if [ -n "$TOOLCHAIN_VERSION" ]; then
            echo "Found toolchain version: $TOOLCHAIN_VERSION"
            echo "version=$TOOLCHAIN_VERSION" >> $GITHUB_OUTPUT
          else
            GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+(\.[0-9]+)?$' go.mod | cut -d ' ' -f 2)
            echo "Found go directive version: $GO_VERSION"
            echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Prepare Build Variables
        id: vars
        run: |
          repo_name=${GITHUB_REPOSITORY##*/}
          
          # For non-tag builds, use commit SHA as identifier
          build_id=${GITHUB_SHA::7}
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "tarball_prefix=${repo_name}_${build_id}" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Output variables:"
          echo "- build_id: $build_id"
          echo "- tarball_prefix: ${repo_name}_${build_id}"

      - name: Install Specific Ignite CLI Version
        run: |
          IGNITE_VERSION="v28.8.1"
          ARCH="linux_amd64"

          # Download the checksum file
          curl -L "https://github.com/ignite/cli/releases/download/${IGNITE_VERSION}/ignite_${IGNITE_VERSION#v}_checksums.txt" -o checksums.txt

          # Extract the expected checksum for the specific architecture from the checksum file
          EXPECTED_CHECKSUM=$(grep "ignite_${IGNITE_VERSION#v}_${ARCH}.tar.gz" checksums.txt | awk '{print $1}')

          # Download the Ignite CLI release tarball
          curl -L "https://github.com/ignite/cli/releases/download/${IGNITE_VERSION}/ignite_${IGNITE_VERSION#v}_${ARCH}.tar.gz" -o ignite.tar.gz

          # Verify the checksum
          ACTUAL_CHECKSUM=$(sha256sum ignite.tar.gz | awk '{print $1}')
          if [ "$ACTUAL_CHECKSUM" != "$EXPECTED_CHECKSUM" ]; then
            echo "Error: Checksum mismatch!"
            exit 1
          fi

          # Extract and make executable
          tar -xzf ignite.tar.gz
          chmod +x ignite

      - name: Build with Ignite CLI
        run: |
          ./ignite chain build --clear-cache --release --release.prefix ${{ steps.vars.outputs.tarball_prefix }} -y -t linux:amd64 #-t darwin:amd64 -t darwin:arm64 -y
        env:
          DO_NOT_TRACK: 1
          GOFLAGS: "-buildvcs=false"

      # Fix permissions
      - name: Fix Release Directory Permissions
        run: |
          sudo chown -R $USER:$USER release/
          sudo chmod -R 755 release/

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') && (github.ref_type == 'tag') && (contains(github.ref, '.') && (contains(github.ref, 'v')))
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag information
        id: tag_info
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Get the tag message
          TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          # If tag message is empty, use the tag name as message
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release $TAG_NAME"
          fi
          # Handle multiline tag messages
          TAG_MESSAGE="${TAG_MESSAGE//'%'/'%25'}"
          TAG_MESSAGE="${TAG_MESSAGE//$'\n'/'%0A'}"
          TAG_MESSAGE="${TAG_MESSAGE//$'\r'/'%0D'}"
          echo "tag_message=$TAG_MESSAGE" >> $GITHUB_OUTPUT
          
          # Get the annotated tag commit
          TAG_COMMIT=$(git rev-list -n 1 $TAG_NAME)
          echo "tag_commit=$TAG_COMMIT" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Tag name: $TAG_NAME"
          echo "Tag commit: $TAG_COMMIT"
          echo "Tag message:"
          git tag -l --format='%(contents)' $TAG_NAME

      - name: Prepare Release Variables
        id: vars
        run: |
          repo_name=${GITHUB_REPOSITORY##*/}
          echo "tarball_prefix=${repo_name}_${{ steps.tag_info.outputs.tag_name }}" >> $GITHUB_OUTPUT

      - name: Configure Git Safe Directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Get Go version from toolchain
        id: go-version
        run: |
          TOOLCHAIN_VERSION=$(grep -E '^toolchain go[0-9]+\.[0-9]+(\.[0-9]+)?$' go.mod | cut -d ' ' -f 2 | sed 's/^go//')
          if [ -n "$TOOLCHAIN_VERSION" ]; then
            echo "Found toolchain version: $TOOLCHAIN_VERSION"
            echo "version=$TOOLCHAIN_VERSION" >> $GITHUB_OUTPUT
          else
            GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+(\.[0-9]+)?$' go.mod | cut -d ' ' -f 2)
            echo "Found go directive version: $GO_VERSION"
            echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true

      - name: Install Specific Ignite CLI Version
        run: |
          IGNITE_VERSION="v28.8.1"
          ARCH="linux_amd64"

          # Download the checksum file
          curl -L "https://github.com/ignite/cli/releases/download/${IGNITE_VERSION}/ignite_${IGNITE_VERSION#v}_checksums.txt" -o checksums.txt

          # Extract the expected checksum for the specific architecture from the checksum file
          EXPECTED_CHECKSUM=$(grep "ignite_${IGNITE_VERSION#v}_${ARCH}.tar.gz" checksums.txt | awk '{print $1}')

          # Download the Ignite CLI release tarball
          curl -L "https://github.com/ignite/cli/releases/download/${IGNITE_VERSION}/ignite_${IGNITE_VERSION#v}_${ARCH}.tar.gz" -o ignite.tar.gz

          # Verify the checksum
          ACTUAL_CHECKSUM=$(sha256sum ignite.tar.gz | awk '{print $1}')
          if [ "$ACTUAL_CHECKSUM" != "$EXPECTED_CHECKSUM" ]; then
            echo "Error: Checksum mismatch!"
            exit 1
          fi

          # Extract and make executable
          tar -xzf ignite.tar.gz
          chmod +x ignite

      - name: Build Release Version
        run: |
          # Set WASMVM version
          WASMVM_VERSION="v2.1.2"  # Make sure this matches your go.mod version
          
          # Download and install libwasmvm
          wget https://github.com/CosmWasm/wasmvm/releases/download/${WASMVM_VERSION}/libwasmvm.x86_64.so
          sudo cp libwasmvm.x86_64.so /usr/lib/
          
          # Unset GOMODCACHE to prevent its path from being included in RUNPATH
          unset GOMODCACHE
          
          # Build with only /usr/lib in RUNPATH
          CGO_LDFLAGS="-Wl,-rpath,/usr/lib -Wl,--disable-new-dtags" ./ignite chain build --clear-cache --release --release.prefix ${{ steps.vars.outputs.tarball_prefix }} -y -t linux:amd64
        env:
          DO_NOT_TRACK: 1
          GOFLAGS: "-buildvcs=false"

      # Fix permissions
      - name: Fix Release Directory Permissions
        run: |
          sudo chown -R $USER:$USER release/
          sudo chmod -R 755 release/

      - name: Prepare Release
        run: |
          cd release
          
          # Extract the existing tar file
          tar_file=$(ls *.tar.gz)

          file_path=$(tar -tzf "$tar_file" | head -n 2 | grep -v '/$' | grep lumerad | sed 's|^/||')
          echo "Binary: $file_path"
          tar xzf "$tar_file" -C .
          ls -l "$file_path"

          # move extracted file
          mkdir -p temp
          mv "$file_path" temp/
          ls -l temp/

          # Remove the original tar file and the extracted files
          rm "$tar_file"
          
          # Copy libwasmvm and create install script
          cp /usr/lib/libwasmvm.x86_64.so temp/
          
          # Create installation script
          cat > temp/install.sh << 'EOF'
          #!/bin/bash
          if [ "$EUID" -ne 0 ]; then 
            echo "Please run as root or with sudo"
            exit 1
          fi
          cp lumerad /usr/local/bin
          cp libwasmvm.x86_64.so /usr/lib/
          ldconfig
          echo "WASM library installed successfully"
          EOF
          
          # Make script executable
          chmod +x temp/install.sh
          
          # Create new tar file with all contents
          cd temp
          tar czf "../$tar_file" ./*
          cd ..
          
          # Clean up
          rm -rf temp
          
          # Verify the final tar contents
          tar tvf "$tar_file"

          sha256sum "$tar_file" > release_checksum


      - name: Publish the Release
        uses: softprops/action-gh-release@v0.1.15
        if: success()
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          files: release/*
          prerelease: ${{ contains(steps.tag_info.outputs.tag_name, '-beta') }}
          generate_release_notes: false
          body: |
            ${{ steps.tag_info.outputs.tag_message }}
            
            Tag: ${{ steps.tag_info.outputs.tag_name }}
            Commit: ${{ steps.tag_info.outputs.tag_commit }}
            
            Installation:
            1. Extract the archive
            2. Run `sudo ./install.sh` to install required libraries
            3. Run the binary: `./lumerad`
          token: ${{ secrets.GITHUB_TOKEN }}
