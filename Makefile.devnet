.PHONY: devnet-build devnet-up devnet-reset devnet-up-detach devnet-down devnet-stop devnet-clean devnet-deploy-tar devnet-upgrade devnet-new devnet-start
.PHONY: devnet-build-default _check-devnet-default-cfg devnet-upgrade-binaries devnet-update-scripts

##### Devnet Makefile ########################################
#
# To use external genesis - provide path to it via EXTERNAL_GENESIS_FILE
# Examples:
#   Using default config files:
#   make devnet-build \
#  		EXTERNAL_CLAIMS_FILE=~/claims.csv \
# 		EXTERNAL_GENESIS_FILE=~/genesis.json
#
#   Using custom config files:
#   make devnet-build \
# 		CONFIG_JSON=path/to/custom/config.json \
# 		VALIDATORS_JSON=path/to/custom/validators.json \
# 		EXTERNAL_CLAIMS_FILE=claims.csv \
# 		EXTERNAL_GENESIS_FILE=template_genesis.json

DEVNET_DIR := /tmp/lumera-devnet-1
SHARED_DIR := ${DEVNET_DIR}/shared
SHARED_RELEASE_DIR := ${SHARED_DIR}/release
SHARED_CONFIG_DIR := ${SHARED_DIR}/config
VALIDATOR_DIRS := $(wildcard ${DEVNET_DIR}/supernova_validator*-data)
HERMES_SIMD_DIR := ${DEVNET_DIR}/hermes-simd-data
HERMES_ROUTER_DIR := ${DEVNET_DIR}/hermes-router
EXTERNAL_GENESIS := $(SHARED_CONFIG_DIR)/external_genesis.json
CLAIMS_FILE := $(SHARED_CONFIG_DIR)/claims.csv
COMPOSE_FILE := devnet/docker-compose.yml

DEVNET_BUILD_LUMERA ?= 1      # 1 = build lumerad for devnet setup, 0 = skip
# directory to take lumerad/supernode/network-maker/sncli binaries from
DEVNET_BIN_DIR ?= devnet/bin

# Default paths for configuration files
DEFAULT_CONFIG_JSON := config/config.json
DEFAULT_VALIDATORS_JSON := config/validators.json

# Default genesis and claims files for devnet docker
DEFAULT_GENESIS_FILE := devnet/default-config/devnet-genesis.json
DEFAULT_CLAIMS_FILE := claims.csv # relative to devnet
ORIG_GENESIS_FILE := devnet/default-config/devnet-genesis-orig.json

devnet-build:
	@mkdir -p "$(SHARED_RELEASE_DIR)"; \
	if [ -n "$(EXTERNAL_GENESIS_FILE)" ] && [ -f "$(EXTERNAL_GENESIS_FILE)" ]; then \
		echo "Starting devnet with existing genesis from $(EXTERNAL_GENESIS_FILE) ..."; \
		mkdir -p "$(SHARED_CONFIG_DIR)"; \
		cp -f "$(EXTERNAL_GENESIS_FILE)" "$(EXTERNAL_GENESIS)"; \
		export EXTERNAL_GENESIS_FILE=1; \
	else \
		echo "No external genesis file provided or file not found. Using default initialization..."; \
		export EXTERNAL_GENESIS_FILE=0; \
	fi; \
	if [ -n "$(EXTERNAL_CLAIMS_FILE)" ] && [ -f "$(EXTERNAL_CLAIMS_FILE)" ]; then \
		cp -f "$(EXTERNAL_CLAIMS_FILE)" "$(CLAIMS_FILE)"; \
		echo "Using claims file $(EXTERNAL_CLAIMS_FILE)"; \
		EXTERNAL_GENESIS_FILE=$${EXTERNAL_GENESIS_FILE}; \
		mkdir -p "${DEVNET_BIN_DIR}"; \
		if [ "$(DEVNET_BUILD_LUMERA)" -eq "1" ]; then \
			$(MAKE) build; \
			if [ ! -f "${BUILD_DIR}/lumerad" ]; then \
				echo "Cannot find lumerad binary [${BUILD_DIR}/lumerad]"; \
				exit 1; \
			fi; \
			echo "Copying [${BUILD_DIR}/lumerad] to [${DEVNET_BIN_DIR}] directory..."; \
			cp -f ${BUILD_DIR}/lumerad "${DEVNET_BIN_DIR}"; \
			go get github.com/CosmWasm/wasmvm/$(WASMVM_VERSION); \
			find $$(go env GOPATH)/pkg/mod/github.com/!cosm!wasm/wasmvm/$(WASMVM_VERSION) -name "libwasmvm.x86_64.so" -exec cp -f {} ${DEVNET_BIN_DIR}/libwasmvm.x86_64.so \; ; \
		else \
			echo "Using existing lumera binaries from ${DEVNET_BIN_DIR}..."; \
		fi; \
		if [ ! -f "${DEVNET_BIN_DIR}/lumerad" ]; then \
			echo "${DEVNET_BIN_DIR}/lumerad binary not found..."; \
			exit 1; \
		fi; \
		if [ ! -f "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so" ]; then \
			echo "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so library not found..."; \
			exit 1; \
		fi; \
        cp -f "${DEVNET_BIN_DIR}/lumerad" "${SHARED_RELEASE_DIR}/"; \
        cp -f "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so" "${SHARED_RELEASE_DIR}/"; \
		cd devnet && \
		${GO} mod tidy && \
		CONFIG_JSON="$${CONFIG_JSON:-$(DEFAULT_CONFIG_JSON)}" \
		VALIDATORS_JSON="$${VALIDATORS_JSON:-$(DEFAULT_VALIDATORS_JSON)}" \
		./scripts/configure.sh --bin-dir "${DEVNET_BIN_DIR}" &&\
		${GO} run . && \
		START_MODE=bootstrap docker compose build && \
		echo "Initialization complete. Ready to start nodes."; \
	else \
		echo "No external claims file provided or file not found."; \
		exit 1; \
	fi

devnet-build-default: _check-devnet-default-cfg
	@$(MAKE) devnet-build \
		DEVNET_BUILD_LUMERA=$(DEVNET_BUILD_LUMERA) \
		EXTERNAL_GENESIS_FILE="$$(realpath $(DEFAULT_GENESIS_FILE))" \
		EXTERNAL_CLAIMS_FILE="$$(realpath $(DEFAULT_CLAIMS_FILE))"

.PHONY: devnet-build-172 _check-devnet-172-cfg
devnet-build-172:
	@$(MAKE) devnet-build \
		DEVNET_BUILD_LUMERA=0 \
		DEVNET_BIN_DIR=devnet/bin-v1.7.2 \
		EXTERNAL_GENESIS_FILE="$$(realpath $(ORIG_GENESIS_FILE))" \
		EXTERNAL_CLAIMS_FILE="$$(realpath $(DEFAULT_CLAIMS_FILE))"

_check-devnet-172-cfg:
	@[ -f "$$(realpath $(ORIG_GENESIS_FILE))" ] || (echo "Missing ORIG_GENESIS_FILE: $$(realpath $(ORIG_GENESIS_FILE))"; exit 1)
	@[ -f "$$(realpath $(DEFAULT_CLAIMS_FILE))" ] || (echo "Missing DEFAULT_CLAIMS_FILE: $$(realpath $(DEFAULT_CLAIMS_FILE))"; exit 1)

_check-devnet-default-cfg:
	@[ -f "$$(realpath $(DEFAULT_GENESIS_FILE))" ] || (echo "Missing DEFAULT_GENESIS_FILE: $$(realpath $(DEFAULT_GENESIS_FILE))"; exit 1)
	@[ -f "$$(realpath $(DEFAULT_CLAIMS_FILE))" ] || (echo "Missing DEFAULT_CLAIMS_FILE: $$(realpath $(DEFAULT_CLAIMS_FILE))"; exit 1)

devnet-reset:
	@echo "Resetting all validators (gentx and keys)..."
	@cd devnet && for i in $$(docker compose -f ${COMPOSE_FILE} config --services | grep '^supernova_validator_'); do \
		echo "Resetting $$i..."; \
		if docker compose -f ${COMPOSE_FILE} ps $$i | grep -q 'Up'; then \
			docker compose -f ${COMPOSE_FILE} exec -T $$i bash -c "\
			  rm -f /root/.lumera/config/genesis.json /root/.lumera/config/priv_validator_key.json"; \
			docker compose -f ${COMPOSE_FILE} restart $$i; \
		else \
			echo "Container $$i is not running. Starting and resetting..."; \
			docker compose -f ${COMPOSE_FILE} run --rm $$i bash -c "\
			  rm -f /root/.lumera/config/genesis.json /root/.lumera/config/priv_validator_key.json"; \
		fi \
	done
	
devnet-up:
	@if [ -f "${COMPOSE_FILE}" ]; then \
		echo "Starting devnet..."; \
		cd devnet && \
		START_MODE=auto docker compose up; \
	else \
		echo "Devnet not built yet. Please run 'make devnet-build' first."; \
		exit 1; \
	fi

devnet-up-detach:
	@if [ -f "${COMPOSE_FILE}" ]; then \
		cd devnet && \
		START_MODE=auto docker compose up -d; \
	else \
		echo "Devnet not built yet. Please run 'make devnet-build' first."; \
		exit 1; \
	fi

devnet-down:
	@if [ -f "${COMPOSE_FILE}" ]; then \
		echo "Stopping devnet..."; \
		cd devnet && \
	    docker compose down --remove-orphans; \
	else \
		echo "Devnet not built yet. Nothing to stop."; \
	fi

devnet-stop:
	@if [ -f "${COMPOSE_FILE}" ]; then \
		echo "Stopping devnet containers..."; \
		cd devnet && \
		docker compose stop; \
	else \
		echo "Devnet not built yet. Nothing to stop."; \
	fi

devnet-start:
	@if [ -f "${COMPOSE_FILE}" ]; then \
		echo "Starting devnet containers..."; \
		cd devnet && \
		START_MODE=run docker compose up; \
	else \
		echo "Devnet not built yet. Nothing to start."; \
	fi

devnet-clean:
	sudo rm -rf $(SHARED_DIR) $(VALIDATOR_DIRS) $(HERMES_SIMD_DIR) $(HERMES_ROUTER_DIR)
	rm -f devnet/docker-compose.yml
	@echo "Devnet docker shared & generated files cleaned up."

devnet-upgrade:
	@mkdir -p "${DEVNET_BIN_DIR}"; \
	if [ "$(DEVNET_BUILD_LUMERA)" = "1" ]; then \
		$(MAKE) build; \
		if [ ! -f "${BUILD_DIR}/lumerad" ]; then \
			echo "Cannot find lumerad binary [${BUILD_DIR}/lumerad]"; \
			exit 1; \
		fi; \
		cp -f ${BUILD_DIR}/lumerad "${DEVNET_BIN_DIR}" && \
		go get github.com/CosmWasm/wasmvm/$(WASMVM_VERSION) && \
		find $$(go env GOPATH)/pkg/mod/github.com/!cosm!wasm/wasmvm/$(WASMVM_VERSION) -name "libwasmvm.x86_64.so" -exec cp -f {} ${DEVNET_BIN_DIR}/libwasmvm.x86_64.so \; \
	else \
		echo "Using lumera binaries from ${DEVNET_BIN_DIR}..."; \
	fi; \
	echo "Stopping devnet containers..."; \
	docker compose -f ${COMPOSE_FILE} stop; \
	if [ ! -f "${DEVNET_BIN_DIR}/lumerad" ]; then \
		echo "${DEVNET_BIN_DIR}/lumerad binary not found..."; \
		exit 1; \
	fi; \
	if [ ! -f "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so" ]; then \
		echo "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so library not found..."; \
		exit 1; \
	fi; \
	cp -f "${DEVNET_BIN_DIR}/lumerad" "${SHARED_RELEASE_DIR}/"; \
	cp -f "${DEVNET_BIN_DIR}/libwasmvm.x86_64.so" "${SHARED_RELEASE_DIR}/"; \
	cd devnet && \
	CONFIG_JSON="$${CONFIG_JSON:-$(DEFAULT_CONFIG_JSON)}" \
	VALIDATORS_JSON="$${VALIDATORS_JSON:-$(DEFAULT_VALIDATORS_JSON)}" \
	./scripts/configure.sh --bin-dir "${DEVNET_BIN_DIR}"

devnet-new:
	$(MAKE) devnet-down
	$(MAKE) devnet-clean
	$(MAKE) devnet-build-default

devnet-upgrade-binaries:
	@if [ ! -f "${BUILD_DIR}/lumerad" ]; then \
		echo "Cannot find lumerad binary [${BUILD_DIR}/lumerad]"; \
		exit 1; \
	fi; \
	if [ ! -f "${BUILD_DIR}/libwasmvm.x86_64.so" ]; then \
		go get github.com/CosmWasm/wasmvm/$(WASMVM_VERSION) && \
		WASMVM_SO="$$(find $$(go env GOPATH)/pkg/mod/github.com/!cosm!wasm/wasmvm/$(WASMVM_VERSION) -name "libwasmvm.x86_64.so" -print -quit)" && \
		if [ -z "$$WASMVM_SO" ]; then \
			echo "Unable to locate libwasmvm.x86_64.so in GOPATH"; \
			exit 1; \
		fi; \
		cp -f "$$WASMVM_SO" ${BUILD_DIR}/libwasmvm.x86_64.so; \
	fi; \
	./devnet/scripts/upgrade-binaries.sh "${BUILD_DIR}"

devnet-update-scripts:
	@if [ ! -f "$(COMPOSE_FILE)" ]; then \
		echo "Missing $(COMPOSE_FILE); run 'make devnet-build' first."; \
		exit 1; \
	fi
	@services="$$(docker compose -f $(COMPOSE_FILE) ps --services)"; \
	common_scripts="start.sh validator-setup.sh supernode-setup.sh network-maker-setup.sh"; \
	updated=0; \
	for svc in $$services; do \
		container="$$(docker compose -f $(COMPOSE_FILE) ps -q $$svc)"; \
		if [ -z "$$container" ]; then \
			echo "Skipping service $$svc (not running)"; \
			continue; \
		fi; \
		if [ "$$svc" = "hermes" ]; then \
			for script_path in devnet/hermes/scripts/*.sh; do \
				[ -f "$$script_path" ] || continue; \
				script="$$(basename "$$script_path")"; \
				echo "Updating $$script in container $$container (service $$svc)"; \
				docker cp "$$script_path" "$$container:/root/scripts/$${script}"; \
				docker exec "$$container" chmod 0755 "/root/scripts/$${script}"; \
				updated=1; \
			done; \
		else \
			for script in $$common_scripts; do \
				host_script="devnet/scripts/$${script}"; \
				if [ ! -f "$$host_script" ]; then \
					echo "Warning: $$host_script not found; skipping."; \
					continue; \
				fi; \
				echo "Updating $$script in container $$container (service $$svc)"; \
				docker cp "$$host_script" "$$container:/root/scripts/$${script}"; \
				docker exec "$$container" chmod 0755 "/root/scripts/$${script}"; \
				updated=1; \
			done; \
		fi; \
	done; \
	if [ "$$updated" -eq 0 ]; then \
		echo "No containers were updated. Ensure the devnet is running."; \
	fi

.PHONY: devnet-new-172 devnet-upgrade_180
devnet-upgrade_180:
	@cd devnet/scripts && ./upgrade.sh v1.8.0 120 ../bin-v1.8.0

devnet-new-172:
	$(MAKE) devnet-down
	$(MAKE) devnet-clean
	$(MAKE) devnet-build-172
	sleep 10
	$(MAKE) devnet-up

devnet-deploy-tar:
	# Ensure required files exist from previous build
	@if [ ! -f "devnet/docker-compose.yml" ] || [ ! -f "devnet/bin/lumerad" ] || [ ! -f "devnet/bin/libwasmvm.x86_64.so" ]; then \
		echo "Please run 'make devnet-build' first to generate required files."; \
		exit 1; \
	fi
	# Optionally include external_genesis.json if available
	@if [ -f "$(EXTERNAL_GENESIS_FILE)" ]; then \
		cp -f "$(EXTERNAL_GENESIS_FILE)" devnet/external_genesis.json; \
	fi

	if [ -n "$(EXTERNAL_CLAIMS_FILE)" ] && [ -f "$(EXTERNAL_CLAIMS_FILE)" ]; then \
		cp -f "${EXTERNAL_CLAIMS_FILE}" devnet/claims.csv; \
	else \
		echo "No external claims file provided or file not found."; \
		exit 1; \
	fi
	# Create the tar archive
	tar -czf devnet-deploy.tar.gz \
		-C devnet dockerfile \
		docker-compose.yml \
		primary-validator.sh \
		secondary-validator.sh \
		lumerad \
		libwasmvm.x86_64.so \
		devnet-deploy.sh \
		claims.csv \
		$(if $(shell [ -f "$(EXTERNAL_GENESIS_FILE)" ] && echo 1),external_genesis.json)

	@if [ -f "devnet/external_genesis.json" ]; then \
		rm devnet/external_genesis.json; \
	fi
	@echo "Created devnet-deploy.tar.gz with the required files."
