// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pastel/supernode/tx.proto

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName        = "/pastel.supernode.Msg/UpdateParams"
	Msg_RegisterSupernode_FullMethodName   = "/pastel.supernode.Msg/RegisterSupernode"
	Msg_DeregisterSupernode_FullMethodName = "/pastel.supernode.Msg/DeregisterSupernode"
	Msg_StartSupernode_FullMethodName      = "/pastel.supernode.Msg/StartSupernode"
	Msg_StopSupernode_FullMethodName       = "/pastel.supernode.Msg/StopSupernode"
	Msg_UpdateSupernode_FullMethodName     = "/pastel.supernode.Msg/UpdateSupernode"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterSupernode(ctx context.Context, in *MsgRegisterSupernode, opts ...grpc.CallOption) (*MsgRegisterSupernodeResponse, error)
	DeregisterSupernode(ctx context.Context, in *MsgDeregisterSupernode, opts ...grpc.CallOption) (*MsgDeregisterSupernodeResponse, error)
	StartSupernode(ctx context.Context, in *MsgStartSupernode, opts ...grpc.CallOption) (*MsgStartSupernodeResponse, error)
	StopSupernode(ctx context.Context, in *MsgStopSupernode, opts ...grpc.CallOption) (*MsgStopSupernodeResponse, error)
	UpdateSupernode(ctx context.Context, in *MsgUpdateSupernode, opts ...grpc.CallOption) (*MsgUpdateSupernodeResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterSupernode(ctx context.Context, in *MsgRegisterSupernode, opts ...grpc.CallOption) (*MsgRegisterSupernodeResponse, error) {
	out := new(MsgRegisterSupernodeResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterSupernode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeregisterSupernode(ctx context.Context, in *MsgDeregisterSupernode, opts ...grpc.CallOption) (*MsgDeregisterSupernodeResponse, error) {
	out := new(MsgDeregisterSupernodeResponse)
	err := c.cc.Invoke(ctx, Msg_DeregisterSupernode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartSupernode(ctx context.Context, in *MsgStartSupernode, opts ...grpc.CallOption) (*MsgStartSupernodeResponse, error) {
	out := new(MsgStartSupernodeResponse)
	err := c.cc.Invoke(ctx, Msg_StartSupernode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StopSupernode(ctx context.Context, in *MsgStopSupernode, opts ...grpc.CallOption) (*MsgStopSupernodeResponse, error) {
	out := new(MsgStopSupernodeResponse)
	err := c.cc.Invoke(ctx, Msg_StopSupernode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSupernode(ctx context.Context, in *MsgUpdateSupernode, opts ...grpc.CallOption) (*MsgUpdateSupernodeResponse, error) {
	out := new(MsgUpdateSupernodeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSupernode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterSupernode(context.Context, *MsgRegisterSupernode) (*MsgRegisterSupernodeResponse, error)
	DeregisterSupernode(context.Context, *MsgDeregisterSupernode) (*MsgDeregisterSupernodeResponse, error)
	StartSupernode(context.Context, *MsgStartSupernode) (*MsgStartSupernodeResponse, error)
	StopSupernode(context.Context, *MsgStopSupernode) (*MsgStopSupernodeResponse, error)
	UpdateSupernode(context.Context, *MsgUpdateSupernode) (*MsgUpdateSupernodeResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RegisterSupernode(context.Context, *MsgRegisterSupernode) (*MsgRegisterSupernodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSupernode not implemented")
}
func (UnimplementedMsgServer) DeregisterSupernode(context.Context, *MsgDeregisterSupernode) (*MsgDeregisterSupernodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterSupernode not implemented")
}
func (UnimplementedMsgServer) StartSupernode(context.Context, *MsgStartSupernode) (*MsgStartSupernodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSupernode not implemented")
}
func (UnimplementedMsgServer) StopSupernode(context.Context, *MsgStopSupernode) (*MsgStopSupernodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSupernode not implemented")
}
func (UnimplementedMsgServer) UpdateSupernode(context.Context, *MsgUpdateSupernode) (*MsgUpdateSupernodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupernode not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterSupernode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterSupernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterSupernode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterSupernode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterSupernode(ctx, req.(*MsgRegisterSupernode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeregisterSupernode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeregisterSupernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeregisterSupernode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeregisterSupernode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeregisterSupernode(ctx, req.(*MsgDeregisterSupernode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartSupernode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartSupernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartSupernode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StartSupernode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartSupernode(ctx, req.(*MsgStartSupernode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StopSupernode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStopSupernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StopSupernode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StopSupernode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StopSupernode(ctx, req.(*MsgStopSupernode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSupernode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSupernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSupernode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSupernode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSupernode(ctx, req.(*MsgUpdateSupernode))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pastel.supernode.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterSupernode",
			Handler:    _Msg_RegisterSupernode_Handler,
		},
		{
			MethodName: "DeregisterSupernode",
			Handler:    _Msg_DeregisterSupernode_Handler,
		},
		{
			MethodName: "StartSupernode",
			Handler:    _Msg_StartSupernode_Handler,
		},
		{
			MethodName: "StopSupernode",
			Handler:    _Msg_StopSupernode_Handler,
		},
		{
			MethodName: "UpdateSupernode",
			Handler:    _Msg_UpdateSupernode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pastel/supernode/tx.proto",
}
