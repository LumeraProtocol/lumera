// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/action/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lumera.action";

/**
 * SenseMetadata contains information for Sense actions.
 * This metadata is directly embedded in the Action.metadata field.
 * For RequestAction:
 *   - Required: data_hash, dd_and_fingerprints_ic
 *   - Optional: collection_id, group_id
 * Keeper will add:
 *   - dd_and_fingerprints_max (from module params)
 * For FinalizeAction:
 *   - Required: dd_and_fingerprints_ids, signatures
 */
export interface SenseMetadata {
  /** RequestAction required fields */
  dataHash: string;
  ddAndFingerprintsIc: number;
  /** RequestAction optional fields */
  collectionId: string;
  groupId: string;
  /** Added by Keeper */
  ddAndFingerprintsMax: number;
  /** FinalizeAction fields */
  ddAndFingerprintsIds: string[];
  signatures: string;
  /** Implementation-specific field to track supernode submissions */
  supernodeFingerprints: { [key: string]: string };
}

export interface SenseMetadata_SupernodeFingerprintsEntry {
  key: string;
  value: string;
}

/**
 * CascadeMetadata contains information for Cascade actions.
 * This metadata is directly embedded in the Action.metadata field.
 * For RequestAction:
 *   - Required: data_hash, file_name, rq_ids_ic, signatures
 * Keeper will add:
 *   - rq_ids_max (from module params)
 * For FinalizeAction:
 *   - Required: rq_ids_ids, rq_ids_oti
 */
export interface CascadeMetadata {
  /** RequestAction required fields */
  dataHash: string;
  fileName: string;
  rqIdsIc: number;
  /** Added by Keeper */
  rqIdsMax: number;
  /** FinalizeAction fields */
  rqIdsIds: string[];
  rqIdsOti: Uint8Array;
  /** RequestAction required field */
  signatures: string;
}

function createBaseSenseMetadata(): SenseMetadata {
  return {
    dataHash: "",
    ddAndFingerprintsIc: 0,
    collectionId: "",
    groupId: "",
    ddAndFingerprintsMax: 0,
    ddAndFingerprintsIds: [],
    signatures: "",
    supernodeFingerprints: {},
  };
}

export const SenseMetadata: MessageFns<SenseMetadata> = {
  encode(message: SenseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataHash !== "") {
      writer.uint32(10).string(message.dataHash);
    }
    if (message.ddAndFingerprintsIc !== 0) {
      writer.uint32(16).uint64(message.ddAndFingerprintsIc);
    }
    if (message.collectionId !== "") {
      writer.uint32(26).string(message.collectionId);
    }
    if (message.groupId !== "") {
      writer.uint32(34).string(message.groupId);
    }
    if (message.ddAndFingerprintsMax !== 0) {
      writer.uint32(40).uint64(message.ddAndFingerprintsMax);
    }
    for (const v of message.ddAndFingerprintsIds) {
      writer.uint32(50).string(v!);
    }
    if (message.signatures !== "") {
      writer.uint32(58).string(message.signatures);
    }
    Object.entries(message.supernodeFingerprints).forEach(([key, value]) => {
      SenseMetadata_SupernodeFingerprintsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dataHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ddAndFingerprintsIc = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ddAndFingerprintsMax = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ddAndFingerprintsIds.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signatures = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = SenseMetadata_SupernodeFingerprintsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.supernodeFingerprints[entry8.key] = entry8.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenseMetadata {
    return {
      dataHash: isSet(object.data_hash) ? globalThis.String(object.data_hash) : "",
      ddAndFingerprintsIc: isSet(object.dd_and_fingerprints_ic) ? globalThis.Number(object.dd_and_fingerprints_ic) : 0,
      collectionId: isSet(object.collection_id) ? globalThis.String(object.collection_id) : "",
      groupId: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
      ddAndFingerprintsMax: isSet(object.dd_and_fingerprints_max)
        ? globalThis.Number(object.dd_and_fingerprints_max)
        : 0,
      ddAndFingerprintsIds: globalThis.Array.isArray(object?.dd_and_fingerprints_ids)
        ? object.dd_and_fingerprints_ids.map((e: any) => globalThis.String(e))
        : [],
      signatures: isSet(object.signatures) ? globalThis.String(object.signatures) : "",
      supernodeFingerprints: isObject(object.supernode_fingerprints)
        ? Object.entries(object.supernode_fingerprints).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SenseMetadata): unknown {
    const obj: any = {};
    if (message.dataHash !== "") {
      obj.data_hash = message.dataHash;
    }
    if (message.ddAndFingerprintsIc !== 0) {
      obj.dd_and_fingerprints_ic = Math.round(message.ddAndFingerprintsIc);
    }
    if (message.collectionId !== "") {
      obj.collection_id = message.collectionId;
    }
    if (message.groupId !== "") {
      obj.group_id = message.groupId;
    }
    if (message.ddAndFingerprintsMax !== 0) {
      obj.dd_and_fingerprints_max = Math.round(message.ddAndFingerprintsMax);
    }
    if (message.ddAndFingerprintsIds?.length) {
      obj.dd_and_fingerprints_ids = message.ddAndFingerprintsIds;
    }
    if (message.signatures !== "") {
      obj.signatures = message.signatures;
    }
    if (message.supernodeFingerprints) {
      const entries = Object.entries(message.supernodeFingerprints);
      if (entries.length > 0) {
        obj.supernode_fingerprints = {};
        entries.forEach(([k, v]) => {
          obj.supernode_fingerprints[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenseMetadata>, I>>(base?: I): SenseMetadata {
    return SenseMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenseMetadata>, I>>(object: I): SenseMetadata {
    const message = createBaseSenseMetadata();
    message.dataHash = object.dataHash ?? "";
    message.ddAndFingerprintsIc = object.ddAndFingerprintsIc ?? 0;
    message.collectionId = object.collectionId ?? "";
    message.groupId = object.groupId ?? "";
    message.ddAndFingerprintsMax = object.ddAndFingerprintsMax ?? 0;
    message.ddAndFingerprintsIds = object.ddAndFingerprintsIds?.map((e) => e) || [];
    message.signatures = object.signatures ?? "";
    message.supernodeFingerprints = Object.entries(object.supernodeFingerprints ?? {}).reduce<
      { [key: string]: string }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSenseMetadata_SupernodeFingerprintsEntry(): SenseMetadata_SupernodeFingerprintsEntry {
  return { key: "", value: "" };
}

export const SenseMetadata_SupernodeFingerprintsEntry: MessageFns<SenseMetadata_SupernodeFingerprintsEntry> = {
  encode(message: SenseMetadata_SupernodeFingerprintsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenseMetadata_SupernodeFingerprintsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenseMetadata_SupernodeFingerprintsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenseMetadata_SupernodeFingerprintsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SenseMetadata_SupernodeFingerprintsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenseMetadata_SupernodeFingerprintsEntry>, I>>(
    base?: I,
  ): SenseMetadata_SupernodeFingerprintsEntry {
    return SenseMetadata_SupernodeFingerprintsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenseMetadata_SupernodeFingerprintsEntry>, I>>(
    object: I,
  ): SenseMetadata_SupernodeFingerprintsEntry {
    const message = createBaseSenseMetadata_SupernodeFingerprintsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCascadeMetadata(): CascadeMetadata {
  return {
    dataHash: "",
    fileName: "",
    rqIdsIc: 0,
    rqIdsMax: 0,
    rqIdsIds: [],
    rqIdsOti: new Uint8Array(0),
    signatures: "",
  };
}

export const CascadeMetadata: MessageFns<CascadeMetadata> = {
  encode(message: CascadeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataHash !== "") {
      writer.uint32(10).string(message.dataHash);
    }
    if (message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.rqIdsIc !== 0) {
      writer.uint32(24).uint64(message.rqIdsIc);
    }
    if (message.rqIdsMax !== 0) {
      writer.uint32(32).uint64(message.rqIdsMax);
    }
    for (const v of message.rqIdsIds) {
      writer.uint32(42).string(v!);
    }
    if (message.rqIdsOti.length !== 0) {
      writer.uint32(50).bytes(message.rqIdsOti);
    }
    if (message.signatures !== "") {
      writer.uint32(58).string(message.signatures);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CascadeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCascadeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dataHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rqIdsIc = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rqIdsMax = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rqIdsIds.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rqIdsOti = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signatures = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CascadeMetadata {
    return {
      dataHash: isSet(object.data_hash) ? globalThis.String(object.data_hash) : "",
      fileName: isSet(object.file_name) ? globalThis.String(object.file_name) : "",
      rqIdsIc: isSet(object.rq_ids_ic) ? globalThis.Number(object.rq_ids_ic) : 0,
      rqIdsMax: isSet(object.rq_ids_max) ? globalThis.Number(object.rq_ids_max) : 0,
      rqIdsIds: globalThis.Array.isArray(object?.rq_ids_ids)
        ? object.rq_ids_ids.map((e: any) => globalThis.String(e))
        : [],
      rqIdsOti: isSet(object.rq_ids_oti) ? bytesFromBase64(object.rq_ids_oti) : new Uint8Array(0),
      signatures: isSet(object.signatures) ? globalThis.String(object.signatures) : "",
    };
  },

  toJSON(message: CascadeMetadata): unknown {
    const obj: any = {};
    if (message.dataHash !== "") {
      obj.data_hash = message.dataHash;
    }
    if (message.fileName !== "") {
      obj.file_name = message.fileName;
    }
    if (message.rqIdsIc !== 0) {
      obj.rq_ids_ic = Math.round(message.rqIdsIc);
    }
    if (message.rqIdsMax !== 0) {
      obj.rq_ids_max = Math.round(message.rqIdsMax);
    }
    if (message.rqIdsIds?.length) {
      obj.rq_ids_ids = message.rqIdsIds;
    }
    if (message.rqIdsOti.length !== 0) {
      obj.rq_ids_oti = base64FromBytes(message.rqIdsOti);
    }
    if (message.signatures !== "") {
      obj.signatures = message.signatures;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CascadeMetadata>, I>>(base?: I): CascadeMetadata {
    return CascadeMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CascadeMetadata>, I>>(object: I): CascadeMetadata {
    const message = createBaseCascadeMetadata();
    message.dataHash = object.dataHash ?? "";
    message.fileName = object.fileName ?? "";
    message.rqIdsIc = object.rqIdsIc ?? 0;
    message.rqIdsMax = object.rqIdsMax ?? 0;
    message.rqIdsIds = object.rqIdsIds?.map((e) => e) || [];
    message.rqIdsOti = object.rqIdsOti ?? new Uint8Array(0);
    message.signatures = object.signatures ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
