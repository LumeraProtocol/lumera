// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/action/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Duration } from "../../google/protobuf/duration";

export const protobufPackage = "lumera.action";

/** Params defines the parameters for the module. */
export interface Params {
  /** Fees */
  baseActionFee: Coin | undefined;
  feePerKbyte:
    | Coin
    | undefined;
  /** Limits */
  maxActionsPerBlock: number;
  minSuperNodes: number;
  maxDdAndFingerprints: number;
  maxRaptorQSymbols: number;
  /** Time Constraints */
  expirationDuration: Duration | undefined;
  minProcessingTime: Duration | undefined;
  maxProcessingTime:
    | Duration
    | undefined;
  /** Reward Distribution */
  superNodeFeeShare: string;
  foundationFeeShare: string;
}

function createBaseParams(): Params {
  return {
    baseActionFee: undefined,
    feePerKbyte: undefined,
    maxActionsPerBlock: 0,
    minSuperNodes: 0,
    maxDdAndFingerprints: 0,
    maxRaptorQSymbols: 0,
    expirationDuration: undefined,
    minProcessingTime: undefined,
    maxProcessingTime: undefined,
    superNodeFeeShare: "",
    foundationFeeShare: "",
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseActionFee !== undefined) {
      Coin.encode(message.baseActionFee, writer.uint32(10).fork()).join();
    }
    if (message.feePerKbyte !== undefined) {
      Coin.encode(message.feePerKbyte, writer.uint32(18).fork()).join();
    }
    if (message.maxActionsPerBlock !== 0) {
      writer.uint32(24).uint64(message.maxActionsPerBlock);
    }
    if (message.minSuperNodes !== 0) {
      writer.uint32(32).uint64(message.minSuperNodes);
    }
    if (message.maxDdAndFingerprints !== 0) {
      writer.uint32(40).uint64(message.maxDdAndFingerprints);
    }
    if (message.maxRaptorQSymbols !== 0) {
      writer.uint32(48).uint64(message.maxRaptorQSymbols);
    }
    if (message.expirationDuration !== undefined) {
      Duration.encode(message.expirationDuration, writer.uint32(58).fork()).join();
    }
    if (message.minProcessingTime !== undefined) {
      Duration.encode(message.minProcessingTime, writer.uint32(66).fork()).join();
    }
    if (message.maxProcessingTime !== undefined) {
      Duration.encode(message.maxProcessingTime, writer.uint32(74).fork()).join();
    }
    if (message.superNodeFeeShare !== "") {
      writer.uint32(82).string(message.superNodeFeeShare);
    }
    if (message.foundationFeeShare !== "") {
      writer.uint32(90).string(message.foundationFeeShare);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.baseActionFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.feePerKbyte = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxActionsPerBlock = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minSuperNodes = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxDdAndFingerprints = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.maxRaptorQSymbols = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.expirationDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.minProcessingTime = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.maxProcessingTime = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.superNodeFeeShare = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.foundationFeeShare = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      baseActionFee: isSet(object.baseActionFee) ? Coin.fromJSON(object.baseActionFee) : undefined,
      feePerKbyte: isSet(object.feePerKbyte) ? Coin.fromJSON(object.feePerKbyte) : undefined,
      maxActionsPerBlock: isSet(object.maxActionsPerBlock) ? globalThis.Number(object.maxActionsPerBlock) : 0,
      minSuperNodes: isSet(object.minSuperNodes) ? globalThis.Number(object.minSuperNodes) : 0,
      maxDdAndFingerprints: isSet(object.maxDdAndFingerprints) ? globalThis.Number(object.maxDdAndFingerprints) : 0,
      maxRaptorQSymbols: isSet(object.maxRaptorQSymbols) ? globalThis.Number(object.maxRaptorQSymbols) : 0,
      expirationDuration: isSet(object.expirationDuration) ? Duration.fromJSON(object.expirationDuration) : undefined,
      minProcessingTime: isSet(object.minProcessingTime) ? Duration.fromJSON(object.minProcessingTime) : undefined,
      maxProcessingTime: isSet(object.maxProcessingTime) ? Duration.fromJSON(object.maxProcessingTime) : undefined,
      superNodeFeeShare: isSet(object.superNodeFeeShare) ? globalThis.String(object.superNodeFeeShare) : "",
      foundationFeeShare: isSet(object.foundationFeeShare) ? globalThis.String(object.foundationFeeShare) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.baseActionFee !== undefined) {
      obj.baseActionFee = Coin.toJSON(message.baseActionFee);
    }
    if (message.feePerKbyte !== undefined) {
      obj.feePerKbyte = Coin.toJSON(message.feePerKbyte);
    }
    if (message.maxActionsPerBlock !== 0) {
      obj.maxActionsPerBlock = Math.round(message.maxActionsPerBlock);
    }
    if (message.minSuperNodes !== 0) {
      obj.minSuperNodes = Math.round(message.minSuperNodes);
    }
    if (message.maxDdAndFingerprints !== 0) {
      obj.maxDdAndFingerprints = Math.round(message.maxDdAndFingerprints);
    }
    if (message.maxRaptorQSymbols !== 0) {
      obj.maxRaptorQSymbols = Math.round(message.maxRaptorQSymbols);
    }
    if (message.expirationDuration !== undefined) {
      obj.expirationDuration = Duration.toJSON(message.expirationDuration);
    }
    if (message.minProcessingTime !== undefined) {
      obj.minProcessingTime = Duration.toJSON(message.minProcessingTime);
    }
    if (message.maxProcessingTime !== undefined) {
      obj.maxProcessingTime = Duration.toJSON(message.maxProcessingTime);
    }
    if (message.superNodeFeeShare !== "") {
      obj.superNodeFeeShare = message.superNodeFeeShare;
    }
    if (message.foundationFeeShare !== "") {
      obj.foundationFeeShare = message.foundationFeeShare;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.baseActionFee = (object.baseActionFee !== undefined && object.baseActionFee !== null)
      ? Coin.fromPartial(object.baseActionFee)
      : undefined;
    message.feePerKbyte = (object.feePerKbyte !== undefined && object.feePerKbyte !== null)
      ? Coin.fromPartial(object.feePerKbyte)
      : undefined;
    message.maxActionsPerBlock = object.maxActionsPerBlock ?? 0;
    message.minSuperNodes = object.minSuperNodes ?? 0;
    message.maxDdAndFingerprints = object.maxDdAndFingerprints ?? 0;
    message.maxRaptorQSymbols = object.maxRaptorQSymbols ?? 0;
    message.expirationDuration = (object.expirationDuration !== undefined && object.expirationDuration !== null)
      ? Duration.fromPartial(object.expirationDuration)
      : undefined;
    message.minProcessingTime = (object.minProcessingTime !== undefined && object.minProcessingTime !== null)
      ? Duration.fromPartial(object.minProcessingTime)
      : undefined;
    message.maxProcessingTime = (object.maxProcessingTime !== undefined && object.maxProcessingTime !== null)
      ? Duration.fromPartial(object.maxProcessingTime)
      : undefined;
    message.superNodeFeeShare = object.superNodeFeeShare ?? "";
    message.foundationFeeShare = object.foundationFeeShare ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
