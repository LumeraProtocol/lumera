// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/action/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Action } from "./action";
import { Params } from "./params";

export const protobufPackage = "lumera.action";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/** Request type for GetAction */
export interface QueryGetActionRequest {
  /** The ID of the action to query */
  actionID: string;
}

/** Response type for GetAction */
export interface QueryGetActionResponse {
  action: Action | undefined;
}

export interface QueryGetActionFeeRequest {
  dataSize: string;
}

export interface QueryGetActionFeeResponse {
  amount: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetActionRequest(): QueryGetActionRequest {
  return { actionID: "" };
}

export const QueryGetActionRequest: MessageFns<QueryGetActionRequest> = {
  encode(message: QueryGetActionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionID !== "") {
      writer.uint32(10).string(message.actionID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionRequest {
    return { actionID: isSet(object.actionID) ? globalThis.String(object.actionID) : "" };
  },

  toJSON(message: QueryGetActionRequest): unknown {
    const obj: any = {};
    if (message.actionID !== "") {
      obj.actionID = message.actionID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionRequest>, I>>(base?: I): QueryGetActionRequest {
    return QueryGetActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionRequest>, I>>(object: I): QueryGetActionRequest {
    const message = createBaseQueryGetActionRequest();
    message.actionID = object.actionID ?? "";
    return message;
  },
};

function createBaseQueryGetActionResponse(): QueryGetActionResponse {
  return { action: undefined };
}

export const QueryGetActionResponse: MessageFns<QueryGetActionResponse> = {
  encode(message: QueryGetActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionResponse {
    return { action: isSet(object.action) ? Action.fromJSON(object.action) : undefined };
  },

  toJSON(message: QueryGetActionResponse): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = Action.toJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionResponse>, I>>(base?: I): QueryGetActionResponse {
    return QueryGetActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionResponse>, I>>(object: I): QueryGetActionResponse {
    const message = createBaseQueryGetActionResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseQueryGetActionFeeRequest(): QueryGetActionFeeRequest {
  return { dataSize: "" };
}

export const QueryGetActionFeeRequest: MessageFns<QueryGetActionFeeRequest> = {
  encode(message: QueryGetActionFeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataSize !== "") {
      writer.uint32(10).string(message.dataSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionFeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionFeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dataSize = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionFeeRequest {
    return { dataSize: isSet(object.dataSize) ? globalThis.String(object.dataSize) : "" };
  },

  toJSON(message: QueryGetActionFeeRequest): unknown {
    const obj: any = {};
    if (message.dataSize !== "") {
      obj.dataSize = message.dataSize;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionFeeRequest>, I>>(base?: I): QueryGetActionFeeRequest {
    return QueryGetActionFeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionFeeRequest>, I>>(object: I): QueryGetActionFeeRequest {
    const message = createBaseQueryGetActionFeeRequest();
    message.dataSize = object.dataSize ?? "";
    return message;
  },
};

function createBaseQueryGetActionFeeResponse(): QueryGetActionFeeResponse {
  return { amount: "" };
}

export const QueryGetActionFeeResponse: MessageFns<QueryGetActionFeeResponse> = {
  encode(message: QueryGetActionFeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetActionFeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetActionFeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetActionFeeResponse {
    return { amount: isSet(object.amount) ? globalThis.String(object.amount) : "" };
  },

  toJSON(message: QueryGetActionFeeResponse): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetActionFeeResponse>, I>>(base?: I): QueryGetActionFeeResponse {
    return QueryGetActionFeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetActionFeeResponse>, I>>(object: I): QueryGetActionFeeResponse {
    const message = createBaseQueryGetActionFeeResponse();
    message.amount = object.amount ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** GetAction queries a single action by ID. */
  GetAction(request: QueryGetActionRequest): Promise<QueryGetActionResponse>;
  /** Queries a list of GetActionFee items. */
  GetActionFee(request: QueryGetActionFeeRequest): Promise<QueryGetActionFeeResponse>;
}

export const QueryServiceName = "lumera.action.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetAction = this.GetAction.bind(this);
    this.GetActionFee = this.GetActionFee.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetAction(request: QueryGetActionRequest): Promise<QueryGetActionResponse> {
    const data = QueryGetActionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAction", data);
    return promise.then((data) => QueryGetActionResponse.decode(new BinaryReader(data)));
  }

  GetActionFee(request: QueryGetActionFeeRequest): Promise<QueryGetActionFeeResponse> {
    const data = QueryGetActionFeeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetActionFee", data);
    return promise.then((data) => QueryGetActionFeeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
