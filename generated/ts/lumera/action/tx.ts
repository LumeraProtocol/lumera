// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/action/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "lumera.action";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgRequestAction {
  creator: string;
  actionType: string;
  metadata: string;
  price: string;
  expirationTime: string;
}

export interface MsgRequestActionResponse {
  actionId: string;
  status: string;
}

export interface MsgFinalizeAction {
  /** must be supernode address */
  creator: string;
  actionId: string;
  actionType: string;
  metadata: string;
}

export interface MsgFinalizeActionResponse {
}

export interface MsgApproveAction {
  creator: string;
  actionId: string;
}

export interface MsgApproveActionResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgRequestAction(): MsgRequestAction {
  return { creator: "", actionType: "", metadata: "", price: "", expirationTime: "" };
}

export const MsgRequestAction: MessageFns<MsgRequestAction> = {
  encode(message: MsgRequestAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.actionType !== "") {
      writer.uint32(18).string(message.actionType);
    }
    if (message.metadata !== "") {
      writer.uint32(26).string(message.metadata);
    }
    if (message.price !== "") {
      writer.uint32(34).string(message.price);
    }
    if (message.expirationTime !== "") {
      writer.uint32(42).string(message.expirationTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRequestAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRequestAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actionType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expirationTime = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRequestAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actionType: isSet(object.actionType) ? globalThis.String(object.actionType) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      expirationTime: isSet(object.expirationTime) ? globalThis.String(object.expirationTime) : "",
    };
  },

  toJSON(message: MsgRequestAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actionType !== "") {
      obj.actionType = message.actionType;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.expirationTime !== "") {
      obj.expirationTime = message.expirationTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRequestAction>, I>>(base?: I): MsgRequestAction {
    return MsgRequestAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRequestAction>, I>>(object: I): MsgRequestAction {
    const message = createBaseMsgRequestAction();
    message.creator = object.creator ?? "";
    message.actionType = object.actionType ?? "";
    message.metadata = object.metadata ?? "";
    message.price = object.price ?? "";
    message.expirationTime = object.expirationTime ?? "";
    return message;
  },
};

function createBaseMsgRequestActionResponse(): MsgRequestActionResponse {
  return { actionId: "", status: "" };
}

export const MsgRequestActionResponse: MessageFns<MsgRequestActionResponse> = {
  encode(message: MsgRequestActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionId !== "") {
      writer.uint32(10).string(message.actionId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRequestActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRequestActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRequestActionResponse {
    return {
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: MsgRequestActionResponse): unknown {
    const obj: any = {};
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRequestActionResponse>, I>>(base?: I): MsgRequestActionResponse {
    return MsgRequestActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRequestActionResponse>, I>>(object: I): MsgRequestActionResponse {
    const message = createBaseMsgRequestActionResponse();
    message.actionId = object.actionId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseMsgFinalizeAction(): MsgFinalizeAction {
  return { creator: "", actionId: "", actionType: "", metadata: "" };
}

export const MsgFinalizeAction: MessageFns<MsgFinalizeAction> = {
  encode(message: MsgFinalizeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.actionId !== "") {
      writer.uint32(18).string(message.actionId);
    }
    if (message.actionType !== "") {
      writer.uint32(26).string(message.actionType);
    }
    if (message.metadata !== "") {
      writer.uint32(34).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgFinalizeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFinalizeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actionType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgFinalizeAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
      actionType: isSet(object.actionType) ? globalThis.String(object.actionType) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: MsgFinalizeAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    if (message.actionType !== "") {
      obj.actionType = message.actionType;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFinalizeAction>, I>>(base?: I): MsgFinalizeAction {
    return MsgFinalizeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFinalizeAction>, I>>(object: I): MsgFinalizeAction {
    const message = createBaseMsgFinalizeAction();
    message.creator = object.creator ?? "";
    message.actionId = object.actionId ?? "";
    message.actionType = object.actionType ?? "";
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseMsgFinalizeActionResponse(): MsgFinalizeActionResponse {
  return {};
}

export const MsgFinalizeActionResponse: MessageFns<MsgFinalizeActionResponse> = {
  encode(_: MsgFinalizeActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgFinalizeActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgFinalizeActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgFinalizeActionResponse {
    return {};
  },

  toJSON(_: MsgFinalizeActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgFinalizeActionResponse>, I>>(base?: I): MsgFinalizeActionResponse {
    return MsgFinalizeActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgFinalizeActionResponse>, I>>(_: I): MsgFinalizeActionResponse {
    const message = createBaseMsgFinalizeActionResponse();
    return message;
  },
};

function createBaseMsgApproveAction(): MsgApproveAction {
  return { creator: "", actionId: "" };
}

export const MsgApproveAction: MessageFns<MsgApproveAction> = {
  encode(message: MsgApproveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.actionId !== "") {
      writer.uint32(18).string(message.actionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgApproveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgApproveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgApproveAction {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
    };
  },

  toJSON(message: MsgApproveAction): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgApproveAction>, I>>(base?: I): MsgApproveAction {
    return MsgApproveAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgApproveAction>, I>>(object: I): MsgApproveAction {
    const message = createBaseMsgApproveAction();
    message.creator = object.creator ?? "";
    message.actionId = object.actionId ?? "";
    return message;
  },
};

function createBaseMsgApproveActionResponse(): MsgApproveActionResponse {
  return {};
}

export const MsgApproveActionResponse: MessageFns<MsgApproveActionResponse> = {
  encode(_: MsgApproveActionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgApproveActionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgApproveActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgApproveActionResponse {
    return {};
  },

  toJSON(_: MsgApproveActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgApproveActionResponse>, I>>(base?: I): MsgApproveActionResponse {
    return MsgApproveActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgApproveActionResponse>, I>>(_: I): MsgApproveActionResponse {
    const message = createBaseMsgApproveActionResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  RequestAction(request: MsgRequestAction): Promise<MsgRequestActionResponse>;
  FinalizeAction(request: MsgFinalizeAction): Promise<MsgFinalizeActionResponse>;
  ApproveAction(request: MsgApproveAction): Promise<MsgApproveActionResponse>;
}

export const MsgServiceName = "lumera.action.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.RequestAction = this.RequestAction.bind(this);
    this.FinalizeAction = this.FinalizeAction.bind(this);
    this.ApproveAction = this.ApproveAction.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  RequestAction(request: MsgRequestAction): Promise<MsgRequestActionResponse> {
    const data = MsgRequestAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "RequestAction", data);
    return promise.then((data) => MsgRequestActionResponse.decode(new BinaryReader(data)));
  }

  FinalizeAction(request: MsgFinalizeAction): Promise<MsgFinalizeActionResponse> {
    const data = MsgFinalizeAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalizeAction", data);
    return promise.then((data) => MsgFinalizeActionResponse.decode(new BinaryReader(data)));
  }

  ApproveAction(request: MsgApproveAction): Promise<MsgApproveActionResponse> {
    const data = MsgApproveAction.encode(request).finish();
    const promise = this.rpc.request(this.service, "ApproveAction", data);
    return promise.then((data) => MsgApproveActionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
