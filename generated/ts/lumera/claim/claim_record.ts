// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/claim/claim_record.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "lumera.claim";

export interface ClaimRecord {
  oldAddress: string;
  balance: Coin[];
  claimed: boolean;
  claimTime: number;
}

function createBaseClaimRecord(): ClaimRecord {
  return { oldAddress: "", balance: [], claimed: false, claimTime: 0 };
}

export const ClaimRecord: MessageFns<ClaimRecord> = {
  encode(message: ClaimRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldAddress !== "") {
      writer.uint32(10).string(message.oldAddress);
    }
    for (const v of message.balance) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.claimed !== false) {
      writer.uint32(24).bool(message.claimed);
    }
    if (message.claimTime !== 0) {
      writer.uint32(32).int64(message.claimTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.claimed = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.claimTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimRecord {
    return {
      oldAddress: isSet(object.oldAddress) ? globalThis.String(object.oldAddress) : "",
      balance: globalThis.Array.isArray(object?.balance) ? object.balance.map((e: any) => Coin.fromJSON(e)) : [],
      claimed: isSet(object.claimed) ? globalThis.Boolean(object.claimed) : false,
      claimTime: isSet(object.claimTime) ? globalThis.Number(object.claimTime) : 0,
    };
  },

  toJSON(message: ClaimRecord): unknown {
    const obj: any = {};
    if (message.oldAddress !== "") {
      obj.oldAddress = message.oldAddress;
    }
    if (message.balance?.length) {
      obj.balance = message.balance.map((e) => Coin.toJSON(e));
    }
    if (message.claimed !== false) {
      obj.claimed = message.claimed;
    }
    if (message.claimTime !== 0) {
      obj.claimTime = Math.round(message.claimTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimRecord>, I>>(base?: I): ClaimRecord {
    return ClaimRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimRecord>, I>>(object: I): ClaimRecord {
    const message = createBaseClaimRecord();
    message.oldAddress = object.oldAddress ?? "";
    message.balance = object.balance?.map((e) => Coin.fromPartial(e)) || [];
    message.claimed = object.claimed ?? false;
    message.claimTime = object.claimTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
