// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/supernode/evidence.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lumera.supernode";

export interface Evidence {
  reporterAddress: string;
  validatorAddress: string;
  actionId: string;
  evidenceType: string;
  description: string;
  severity: number;
  height: number;
}

function createBaseEvidence(): Evidence {
  return {
    reporterAddress: "",
    validatorAddress: "",
    actionId: "",
    evidenceType: "",
    description: "",
    severity: 0,
    height: 0,
  };
}

export const Evidence: MessageFns<Evidence> = {
  encode(message: Evidence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reporterAddress !== "") {
      writer.uint32(10).string(message.reporterAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.actionId !== "") {
      writer.uint32(26).string(message.actionId);
    }
    if (message.evidenceType !== "") {
      writer.uint32(34).string(message.evidenceType);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.severity !== 0) {
      writer.uint32(48).uint64(message.severity);
    }
    if (message.height !== 0) {
      writer.uint32(56).int32(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Evidence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reporterAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.actionId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.evidenceType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.severity = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Evidence {
    return {
      reporterAddress: isSet(object.reporterAddress) ? globalThis.String(object.reporterAddress) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
      evidenceType: isSet(object.evidenceType) ? globalThis.String(object.evidenceType) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      severity: isSet(object.severity) ? globalThis.Number(object.severity) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Evidence): unknown {
    const obj: any = {};
    if (message.reporterAddress !== "") {
      obj.reporterAddress = message.reporterAddress;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    if (message.evidenceType !== "") {
      obj.evidenceType = message.evidenceType;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.severity !== 0) {
      obj.severity = Math.round(message.severity);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Evidence>, I>>(base?: I): Evidence {
    return Evidence.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Evidence>, I>>(object: I): Evidence {
    const message = createBaseEvidence();
    message.reporterAddress = object.reporterAddress ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.actionId = object.actionId ?? "";
    message.evidenceType = object.evidenceType ?? "";
    message.description = object.description ?? "";
    message.severity = object.severity ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
