// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/supernode/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lumera.supernode";

/** Params defines the parameters for the module. */
export interface Params {
  minimumStakeForSn: number;
  reportingThreshold: number;
  slashingThreshold: number;
  metricsThresholds: string;
  evidenceRetentionPeriod: string;
  slashingFraction: string;
  inactivityPenaltyPeriod: string;
}

function createBaseParams(): Params {
  return {
    minimumStakeForSn: 0,
    reportingThreshold: 0,
    slashingThreshold: 0,
    metricsThresholds: "",
    evidenceRetentionPeriod: "",
    slashingFraction: "",
    inactivityPenaltyPeriod: "",
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minimumStakeForSn !== 0) {
      writer.uint32(8).uint64(message.minimumStakeForSn);
    }
    if (message.reportingThreshold !== 0) {
      writer.uint32(16).uint64(message.reportingThreshold);
    }
    if (message.slashingThreshold !== 0) {
      writer.uint32(24).uint64(message.slashingThreshold);
    }
    if (message.metricsThresholds !== "") {
      writer.uint32(34).string(message.metricsThresholds);
    }
    if (message.evidenceRetentionPeriod !== "") {
      writer.uint32(42).string(message.evidenceRetentionPeriod);
    }
    if (message.slashingFraction !== "") {
      writer.uint32(50).string(message.slashingFraction);
    }
    if (message.inactivityPenaltyPeriod !== "") {
      writer.uint32(58).string(message.inactivityPenaltyPeriod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minimumStakeForSn = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reportingThreshold = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.slashingThreshold = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metricsThresholds = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.evidenceRetentionPeriod = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.slashingFraction = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.inactivityPenaltyPeriod = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      minimumStakeForSn: isSet(object.minimumStakeForSn) ? globalThis.Number(object.minimumStakeForSn) : 0,
      reportingThreshold: isSet(object.reportingThreshold) ? globalThis.Number(object.reportingThreshold) : 0,
      slashingThreshold: isSet(object.slashingThreshold) ? globalThis.Number(object.slashingThreshold) : 0,
      metricsThresholds: isSet(object.metricsThresholds) ? globalThis.String(object.metricsThresholds) : "",
      evidenceRetentionPeriod: isSet(object.evidenceRetentionPeriod)
        ? globalThis.String(object.evidenceRetentionPeriod)
        : "",
      slashingFraction: isSet(object.slashingFraction) ? globalThis.String(object.slashingFraction) : "",
      inactivityPenaltyPeriod: isSet(object.inactivityPenaltyPeriod)
        ? globalThis.String(object.inactivityPenaltyPeriod)
        : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.minimumStakeForSn !== 0) {
      obj.minimumStakeForSn = Math.round(message.minimumStakeForSn);
    }
    if (message.reportingThreshold !== 0) {
      obj.reportingThreshold = Math.round(message.reportingThreshold);
    }
    if (message.slashingThreshold !== 0) {
      obj.slashingThreshold = Math.round(message.slashingThreshold);
    }
    if (message.metricsThresholds !== "") {
      obj.metricsThresholds = message.metricsThresholds;
    }
    if (message.evidenceRetentionPeriod !== "") {
      obj.evidenceRetentionPeriod = message.evidenceRetentionPeriod;
    }
    if (message.slashingFraction !== "") {
      obj.slashingFraction = message.slashingFraction;
    }
    if (message.inactivityPenaltyPeriod !== "") {
      obj.inactivityPenaltyPeriod = message.inactivityPenaltyPeriod;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.minimumStakeForSn = object.minimumStakeForSn ?? 0;
    message.reportingThreshold = object.reportingThreshold ?? 0;
    message.slashingThreshold = object.slashingThreshold ?? 0;
    message.metricsThresholds = object.metricsThresholds ?? "";
    message.evidenceRetentionPeriod = object.evidenceRetentionPeriod ?? "";
    message.slashingFraction = object.slashingFraction ?? "";
    message.inactivityPenaltyPeriod = object.inactivityPenaltyPeriod ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
