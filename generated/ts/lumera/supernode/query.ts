// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/supernode/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";
import { SuperNode } from "./super_node";

export const protobufPackage = "lumera.supernode";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetSuperNodeRequest {
  validatorAddress: string;
}

export interface QueryGetSuperNodeResponse {
  supernode: SuperNode | undefined;
}

export interface QueryGetSuperNodeBySuperNodeAddressRequest {
  supernodeAddress: string;
}

export interface QueryGetSuperNodeBySuperNodeAddressResponse {
  supernode: SuperNode | undefined;
}

export interface QueryListSuperNodesRequest {
  pagination: PageRequest | undefined;
}

export interface QueryListSuperNodesResponse {
  supernodes: SuperNode[];
  pagination: PageResponse | undefined;
}

export interface QueryGetTopSuperNodesForBlockRequest {
  blockHeight: number;
  limit: number;
  state: string;
}

export interface QueryGetTopSuperNodesForBlockResponse {
  supernodes: SuperNode[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetSuperNodeRequest(): QueryGetSuperNodeRequest {
  return { validatorAddress: "" };
}

export const QueryGetSuperNodeRequest: MessageFns<QueryGetSuperNodeRequest> = {
  encode(message: QueryGetSuperNodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSuperNodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSuperNodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSuperNodeRequest {
    return { validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "" };
  },

  toJSON(message: QueryGetSuperNodeRequest): unknown {
    const obj: any = {};
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSuperNodeRequest>, I>>(base?: I): QueryGetSuperNodeRequest {
    return QueryGetSuperNodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSuperNodeRequest>, I>>(object: I): QueryGetSuperNodeRequest {
    const message = createBaseQueryGetSuperNodeRequest();
    message.validatorAddress = object.validatorAddress ?? "";
    return message;
  },
};

function createBaseQueryGetSuperNodeResponse(): QueryGetSuperNodeResponse {
  return { supernode: undefined };
}

export const QueryGetSuperNodeResponse: MessageFns<QueryGetSuperNodeResponse> = {
  encode(message: QueryGetSuperNodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supernode !== undefined) {
      SuperNode.encode(message.supernode, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSuperNodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSuperNodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supernode = SuperNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSuperNodeResponse {
    return { supernode: isSet(object.supernode) ? SuperNode.fromJSON(object.supernode) : undefined };
  },

  toJSON(message: QueryGetSuperNodeResponse): unknown {
    const obj: any = {};
    if (message.supernode !== undefined) {
      obj.supernode = SuperNode.toJSON(message.supernode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSuperNodeResponse>, I>>(base?: I): QueryGetSuperNodeResponse {
    return QueryGetSuperNodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSuperNodeResponse>, I>>(object: I): QueryGetSuperNodeResponse {
    const message = createBaseQueryGetSuperNodeResponse();
    message.supernode = (object.supernode !== undefined && object.supernode !== null)
      ? SuperNode.fromPartial(object.supernode)
      : undefined;
    return message;
  },
};

function createBaseQueryGetSuperNodeBySuperNodeAddressRequest(): QueryGetSuperNodeBySuperNodeAddressRequest {
  return { supernodeAddress: "" };
}

export const QueryGetSuperNodeBySuperNodeAddressRequest: MessageFns<QueryGetSuperNodeBySuperNodeAddressRequest> = {
  encode(message: QueryGetSuperNodeBySuperNodeAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supernodeAddress !== "") {
      writer.uint32(10).string(message.supernodeAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSuperNodeBySuperNodeAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSuperNodeBySuperNodeAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supernodeAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSuperNodeBySuperNodeAddressRequest {
    return { supernodeAddress: isSet(object.supernodeAddress) ? globalThis.String(object.supernodeAddress) : "" };
  },

  toJSON(message: QueryGetSuperNodeBySuperNodeAddressRequest): unknown {
    const obj: any = {};
    if (message.supernodeAddress !== "") {
      obj.supernodeAddress = message.supernodeAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSuperNodeBySuperNodeAddressRequest>, I>>(
    base?: I,
  ): QueryGetSuperNodeBySuperNodeAddressRequest {
    return QueryGetSuperNodeBySuperNodeAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSuperNodeBySuperNodeAddressRequest>, I>>(
    object: I,
  ): QueryGetSuperNodeBySuperNodeAddressRequest {
    const message = createBaseQueryGetSuperNodeBySuperNodeAddressRequest();
    message.supernodeAddress = object.supernodeAddress ?? "";
    return message;
  },
};

function createBaseQueryGetSuperNodeBySuperNodeAddressResponse(): QueryGetSuperNodeBySuperNodeAddressResponse {
  return { supernode: undefined };
}

export const QueryGetSuperNodeBySuperNodeAddressResponse: MessageFns<QueryGetSuperNodeBySuperNodeAddressResponse> = {
  encode(
    message: QueryGetSuperNodeBySuperNodeAddressResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.supernode !== undefined) {
      SuperNode.encode(message.supernode, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSuperNodeBySuperNodeAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSuperNodeBySuperNodeAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supernode = SuperNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSuperNodeBySuperNodeAddressResponse {
    return { supernode: isSet(object.supernode) ? SuperNode.fromJSON(object.supernode) : undefined };
  },

  toJSON(message: QueryGetSuperNodeBySuperNodeAddressResponse): unknown {
    const obj: any = {};
    if (message.supernode !== undefined) {
      obj.supernode = SuperNode.toJSON(message.supernode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSuperNodeBySuperNodeAddressResponse>, I>>(
    base?: I,
  ): QueryGetSuperNodeBySuperNodeAddressResponse {
    return QueryGetSuperNodeBySuperNodeAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSuperNodeBySuperNodeAddressResponse>, I>>(
    object: I,
  ): QueryGetSuperNodeBySuperNodeAddressResponse {
    const message = createBaseQueryGetSuperNodeBySuperNodeAddressResponse();
    message.supernode = (object.supernode !== undefined && object.supernode !== null)
      ? SuperNode.fromPartial(object.supernode)
      : undefined;
    return message;
  },
};

function createBaseQueryListSuperNodesRequest(): QueryListSuperNodesRequest {
  return { pagination: undefined };
}

export const QueryListSuperNodesRequest: MessageFns<QueryListSuperNodesRequest> = {
  encode(message: QueryListSuperNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListSuperNodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListSuperNodesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListSuperNodesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryListSuperNodesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListSuperNodesRequest>, I>>(base?: I): QueryListSuperNodesRequest {
    return QueryListSuperNodesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListSuperNodesRequest>, I>>(object: I): QueryListSuperNodesRequest {
    const message = createBaseQueryListSuperNodesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryListSuperNodesResponse(): QueryListSuperNodesResponse {
  return { supernodes: [], pagination: undefined };
}

export const QueryListSuperNodesResponse: MessageFns<QueryListSuperNodesResponse> = {
  encode(message: QueryListSuperNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.supernodes) {
      SuperNode.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryListSuperNodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListSuperNodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supernodes.push(SuperNode.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListSuperNodesResponse {
    return {
      supernodes: globalThis.Array.isArray(object?.supernodes)
        ? object.supernodes.map((e: any) => SuperNode.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryListSuperNodesResponse): unknown {
    const obj: any = {};
    if (message.supernodes?.length) {
      obj.supernodes = message.supernodes.map((e) => SuperNode.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListSuperNodesResponse>, I>>(base?: I): QueryListSuperNodesResponse {
    return QueryListSuperNodesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListSuperNodesResponse>, I>>(object: I): QueryListSuperNodesResponse {
    const message = createBaseQueryListSuperNodesResponse();
    message.supernodes = object.supernodes?.map((e) => SuperNode.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetTopSuperNodesForBlockRequest(): QueryGetTopSuperNodesForBlockRequest {
  return { blockHeight: 0, limit: 0, state: "" };
}

export const QueryGetTopSuperNodesForBlockRequest: MessageFns<QueryGetTopSuperNodesForBlockRequest> = {
  encode(message: QueryGetTopSuperNodesForBlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int32(message.blockHeight);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.state !== "") {
      writer.uint32(26).string(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTopSuperNodesForBlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTopSuperNodesForBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.state = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTopSuperNodesForBlockRequest {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      state: isSet(object.state) ? globalThis.String(object.state) : "",
    };
  },

  toJSON(message: QueryGetTopSuperNodesForBlockRequest): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTopSuperNodesForBlockRequest>, I>>(
    base?: I,
  ): QueryGetTopSuperNodesForBlockRequest {
    return QueryGetTopSuperNodesForBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTopSuperNodesForBlockRequest>, I>>(
    object: I,
  ): QueryGetTopSuperNodesForBlockRequest {
    const message = createBaseQueryGetTopSuperNodesForBlockRequest();
    message.blockHeight = object.blockHeight ?? 0;
    message.limit = object.limit ?? 0;
    message.state = object.state ?? "";
    return message;
  },
};

function createBaseQueryGetTopSuperNodesForBlockResponse(): QueryGetTopSuperNodesForBlockResponse {
  return { supernodes: [] };
}

export const QueryGetTopSuperNodesForBlockResponse: MessageFns<QueryGetTopSuperNodesForBlockResponse> = {
  encode(message: QueryGetTopSuperNodesForBlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.supernodes) {
      SuperNode.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetTopSuperNodesForBlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTopSuperNodesForBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supernodes.push(SuperNode.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetTopSuperNodesForBlockResponse {
    return {
      supernodes: globalThis.Array.isArray(object?.supernodes)
        ? object.supernodes.map((e: any) => SuperNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryGetTopSuperNodesForBlockResponse): unknown {
    const obj: any = {};
    if (message.supernodes?.length) {
      obj.supernodes = message.supernodes.map((e) => SuperNode.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetTopSuperNodesForBlockResponse>, I>>(
    base?: I,
  ): QueryGetTopSuperNodesForBlockResponse {
    return QueryGetTopSuperNodesForBlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetTopSuperNodesForBlockResponse>, I>>(
    object: I,
  ): QueryGetTopSuperNodesForBlockResponse {
    const message = createBaseQueryGetTopSuperNodesForBlockResponse();
    message.supernodes = object.supernodes?.map((e) => SuperNode.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a SuperNode by validatorAddress. */
  GetSuperNode(request: QueryGetSuperNodeRequest): Promise<QueryGetSuperNodeResponse>;
  /** Queries a SuperNode by supernodeAddress. */
  GetSuperNodeBySuperNodeAddress(
    request: QueryGetSuperNodeBySuperNodeAddressRequest,
  ): Promise<QueryGetSuperNodeBySuperNodeAddressResponse>;
  /** Queries a list of SuperNodes. */
  ListSuperNodes(request: QueryListSuperNodesRequest): Promise<QueryListSuperNodesResponse>;
  /** Queries a list of GetTopSuperNodesForBlock items. */
  GetTopSuperNodesForBlock(
    request: QueryGetTopSuperNodesForBlockRequest,
  ): Promise<QueryGetTopSuperNodesForBlockResponse>;
}

export const QueryServiceName = "lumera.supernode.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetSuperNode = this.GetSuperNode.bind(this);
    this.GetSuperNodeBySuperNodeAddress = this.GetSuperNodeBySuperNodeAddress.bind(this);
    this.ListSuperNodes = this.ListSuperNodes.bind(this);
    this.GetTopSuperNodesForBlock = this.GetTopSuperNodesForBlock.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetSuperNode(request: QueryGetSuperNodeRequest): Promise<QueryGetSuperNodeResponse> {
    const data = QueryGetSuperNodeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSuperNode", data);
    return promise.then((data) => QueryGetSuperNodeResponse.decode(new BinaryReader(data)));
  }

  GetSuperNodeBySuperNodeAddress(
    request: QueryGetSuperNodeBySuperNodeAddressRequest,
  ): Promise<QueryGetSuperNodeBySuperNodeAddressResponse> {
    const data = QueryGetSuperNodeBySuperNodeAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetSuperNodeBySuperNodeAddress", data);
    return promise.then((data) => QueryGetSuperNodeBySuperNodeAddressResponse.decode(new BinaryReader(data)));
  }

  ListSuperNodes(request: QueryListSuperNodesRequest): Promise<QueryListSuperNodesResponse> {
    const data = QueryListSuperNodesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSuperNodes", data);
    return promise.then((data) => QueryListSuperNodesResponse.decode(new BinaryReader(data)));
  }

  GetTopSuperNodesForBlock(
    request: QueryGetTopSuperNodesForBlockRequest,
  ): Promise<QueryGetTopSuperNodesForBlockResponse> {
    const data = QueryGetTopSuperNodesForBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTopSuperNodesForBlock", data);
    return promise.then((data) => QueryGetTopSuperNodesForBlockResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
