// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: lumera/supernode/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "lumera.supernode";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgRegisterSupernode {
  creator: string;
  validatorAddress: string;
  ipAddress: string;
  version: string;
  supernodeAccount: string;
}

export interface MsgRegisterSupernodeResponse {
}

export interface MsgDeregisterSupernode {
  creator: string;
  validatorAddress: string;
}

export interface MsgDeregisterSupernodeResponse {
}

export interface MsgStartSupernode {
  creator: string;
  validatorAddress: string;
}

export interface MsgStartSupernodeResponse {
}

export interface MsgStopSupernode {
  creator: string;
  validatorAddress: string;
  reason: string;
}

export interface MsgStopSupernodeResponse {
}

export interface MsgUpdateSupernode {
  creator: string;
  validatorAddress: string;
  ipAddress: string;
  version: string;
  supernodeAccount: string;
}

export interface MsgUpdateSupernodeResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgRegisterSupernode(): MsgRegisterSupernode {
  return { creator: "", validatorAddress: "", ipAddress: "", version: "", supernodeAccount: "" };
}

export const MsgRegisterSupernode: MessageFns<MsgRegisterSupernode> = {
  encode(message: MsgRegisterSupernode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.supernodeAccount !== "") {
      writer.uint32(42).string(message.supernodeAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterSupernode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterSupernode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.supernodeAccount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterSupernode {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      supernodeAccount: isSet(object.supernodeAccount) ? globalThis.String(object.supernodeAccount) : "",
    };
  },

  toJSON(message: MsgRegisterSupernode): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.supernodeAccount !== "") {
      obj.supernodeAccount = message.supernodeAccount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterSupernode>, I>>(base?: I): MsgRegisterSupernode {
    return MsgRegisterSupernode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterSupernode>, I>>(object: I): MsgRegisterSupernode {
    const message = createBaseMsgRegisterSupernode();
    message.creator = object.creator ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.version = object.version ?? "";
    message.supernodeAccount = object.supernodeAccount ?? "";
    return message;
  },
};

function createBaseMsgRegisterSupernodeResponse(): MsgRegisterSupernodeResponse {
  return {};
}

export const MsgRegisterSupernodeResponse: MessageFns<MsgRegisterSupernodeResponse> = {
  encode(_: MsgRegisterSupernodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterSupernodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterSupernodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterSupernodeResponse {
    return {};
  },

  toJSON(_: MsgRegisterSupernodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterSupernodeResponse>, I>>(base?: I): MsgRegisterSupernodeResponse {
    return MsgRegisterSupernodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterSupernodeResponse>, I>>(_: I): MsgRegisterSupernodeResponse {
    const message = createBaseMsgRegisterSupernodeResponse();
    return message;
  },
};

function createBaseMsgDeregisterSupernode(): MsgDeregisterSupernode {
  return { creator: "", validatorAddress: "" };
}

export const MsgDeregisterSupernode: MessageFns<MsgDeregisterSupernode> = {
  encode(message: MsgDeregisterSupernode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeregisterSupernode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeregisterSupernode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeregisterSupernode {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
    };
  },

  toJSON(message: MsgDeregisterSupernode): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeregisterSupernode>, I>>(base?: I): MsgDeregisterSupernode {
    return MsgDeregisterSupernode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeregisterSupernode>, I>>(object: I): MsgDeregisterSupernode {
    const message = createBaseMsgDeregisterSupernode();
    message.creator = object.creator ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    return message;
  },
};

function createBaseMsgDeregisterSupernodeResponse(): MsgDeregisterSupernodeResponse {
  return {};
}

export const MsgDeregisterSupernodeResponse: MessageFns<MsgDeregisterSupernodeResponse> = {
  encode(_: MsgDeregisterSupernodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeregisterSupernodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeregisterSupernodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeregisterSupernodeResponse {
    return {};
  },

  toJSON(_: MsgDeregisterSupernodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeregisterSupernodeResponse>, I>>(base?: I): MsgDeregisterSupernodeResponse {
    return MsgDeregisterSupernodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeregisterSupernodeResponse>, I>>(_: I): MsgDeregisterSupernodeResponse {
    const message = createBaseMsgDeregisterSupernodeResponse();
    return message;
  },
};

function createBaseMsgStartSupernode(): MsgStartSupernode {
  return { creator: "", validatorAddress: "" };
}

export const MsgStartSupernode: MessageFns<MsgStartSupernode> = {
  encode(message: MsgStartSupernode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStartSupernode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStartSupernode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgStartSupernode {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
    };
  },

  toJSON(message: MsgStartSupernode): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStartSupernode>, I>>(base?: I): MsgStartSupernode {
    return MsgStartSupernode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStartSupernode>, I>>(object: I): MsgStartSupernode {
    const message = createBaseMsgStartSupernode();
    message.creator = object.creator ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    return message;
  },
};

function createBaseMsgStartSupernodeResponse(): MsgStartSupernodeResponse {
  return {};
}

export const MsgStartSupernodeResponse: MessageFns<MsgStartSupernodeResponse> = {
  encode(_: MsgStartSupernodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStartSupernodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStartSupernodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgStartSupernodeResponse {
    return {};
  },

  toJSON(_: MsgStartSupernodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStartSupernodeResponse>, I>>(base?: I): MsgStartSupernodeResponse {
    return MsgStartSupernodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStartSupernodeResponse>, I>>(_: I): MsgStartSupernodeResponse {
    const message = createBaseMsgStartSupernodeResponse();
    return message;
  },
};

function createBaseMsgStopSupernode(): MsgStopSupernode {
  return { creator: "", validatorAddress: "", reason: "" };
}

export const MsgStopSupernode: MessageFns<MsgStopSupernode> = {
  encode(message: MsgStopSupernode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStopSupernode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStopSupernode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgStopSupernode {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: MsgStopSupernode): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStopSupernode>, I>>(base?: I): MsgStopSupernode {
    return MsgStopSupernode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStopSupernode>, I>>(object: I): MsgStopSupernode {
    const message = createBaseMsgStopSupernode();
    message.creator = object.creator ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseMsgStopSupernodeResponse(): MsgStopSupernodeResponse {
  return {};
}

export const MsgStopSupernodeResponse: MessageFns<MsgStopSupernodeResponse> = {
  encode(_: MsgStopSupernodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgStopSupernodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgStopSupernodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgStopSupernodeResponse {
    return {};
  },

  toJSON(_: MsgStopSupernodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgStopSupernodeResponse>, I>>(base?: I): MsgStopSupernodeResponse {
    return MsgStopSupernodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgStopSupernodeResponse>, I>>(_: I): MsgStopSupernodeResponse {
    const message = createBaseMsgStopSupernodeResponse();
    return message;
  },
};

function createBaseMsgUpdateSupernode(): MsgUpdateSupernode {
  return { creator: "", validatorAddress: "", ipAddress: "", version: "", supernodeAccount: "" };
}

export const MsgUpdateSupernode: MessageFns<MsgUpdateSupernode> = {
  encode(message: MsgUpdateSupernode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.supernodeAccount !== "") {
      writer.uint32(42).string(message.supernodeAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateSupernode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateSupernode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.supernodeAccount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateSupernode {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      supernodeAccount: isSet(object.supernodeAccount) ? globalThis.String(object.supernodeAccount) : "",
    };
  },

  toJSON(message: MsgUpdateSupernode): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.supernodeAccount !== "") {
      obj.supernodeAccount = message.supernodeAccount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateSupernode>, I>>(base?: I): MsgUpdateSupernode {
    return MsgUpdateSupernode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateSupernode>, I>>(object: I): MsgUpdateSupernode {
    const message = createBaseMsgUpdateSupernode();
    message.creator = object.creator ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.version = object.version ?? "";
    message.supernodeAccount = object.supernodeAccount ?? "";
    return message;
  },
};

function createBaseMsgUpdateSupernodeResponse(): MsgUpdateSupernodeResponse {
  return {};
}

export const MsgUpdateSupernodeResponse: MessageFns<MsgUpdateSupernodeResponse> = {
  encode(_: MsgUpdateSupernodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateSupernodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateSupernodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateSupernodeResponse {
    return {};
  },

  toJSON(_: MsgUpdateSupernodeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateSupernodeResponse>, I>>(base?: I): MsgUpdateSupernodeResponse {
    return MsgUpdateSupernodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateSupernodeResponse>, I>>(_: I): MsgUpdateSupernodeResponse {
    const message = createBaseMsgUpdateSupernodeResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  RegisterSupernode(request: MsgRegisterSupernode): Promise<MsgRegisterSupernodeResponse>;
  DeregisterSupernode(request: MsgDeregisterSupernode): Promise<MsgDeregisterSupernodeResponse>;
  StartSupernode(request: MsgStartSupernode): Promise<MsgStartSupernodeResponse>;
  StopSupernode(request: MsgStopSupernode): Promise<MsgStopSupernodeResponse>;
  UpdateSupernode(request: MsgUpdateSupernode): Promise<MsgUpdateSupernodeResponse>;
}

export const MsgServiceName = "lumera.supernode.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.RegisterSupernode = this.RegisterSupernode.bind(this);
    this.DeregisterSupernode = this.DeregisterSupernode.bind(this);
    this.StartSupernode = this.StartSupernode.bind(this);
    this.StopSupernode = this.StopSupernode.bind(this);
    this.UpdateSupernode = this.UpdateSupernode.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  RegisterSupernode(request: MsgRegisterSupernode): Promise<MsgRegisterSupernodeResponse> {
    const data = MsgRegisterSupernode.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterSupernode", data);
    return promise.then((data) => MsgRegisterSupernodeResponse.decode(new BinaryReader(data)));
  }

  DeregisterSupernode(request: MsgDeregisterSupernode): Promise<MsgDeregisterSupernodeResponse> {
    const data = MsgDeregisterSupernode.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeregisterSupernode", data);
    return promise.then((data) => MsgDeregisterSupernodeResponse.decode(new BinaryReader(data)));
  }

  StartSupernode(request: MsgStartSupernode): Promise<MsgStartSupernodeResponse> {
    const data = MsgStartSupernode.encode(request).finish();
    const promise = this.rpc.request(this.service, "StartSupernode", data);
    return promise.then((data) => MsgStartSupernodeResponse.decode(new BinaryReader(data)));
  }

  StopSupernode(request: MsgStopSupernode): Promise<MsgStopSupernodeResponse> {
    const data = MsgStopSupernode.encode(request).finish();
    const promise = this.rpc.request(this.service, "StopSupernode", data);
    return promise.then((data) => MsgStopSupernodeResponse.decode(new BinaryReader(data)));
  }

  UpdateSupernode(request: MsgUpdateSupernode): Promise<MsgUpdateSupernodeResponse> {
    const data = MsgUpdateSupernode.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateSupernode", data);
    return promise.then((data) => MsgUpdateSupernodeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
