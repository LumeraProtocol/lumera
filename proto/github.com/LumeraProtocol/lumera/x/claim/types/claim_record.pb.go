// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/claim/claim_record.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimRecord struct {
	OldAddress string                                   `protobuf:"bytes,1,opt,name=oldAddress,proto3" json:"oldAddress,omitempty"`
	Balance    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
	Claimed    bool                                     `protobuf:"varint,3,opt,name=claimed,proto3" json:"claimed"`
	ClaimTime  int64                                    `protobuf:"varint,4,opt,name=claimTime,proto3" json:"claimTime,omitempty"`
}

func (m *ClaimRecord) Reset()         { *m = ClaimRecord{} }
func (m *ClaimRecord) String() string { return proto.CompactTextString(m) }
func (*ClaimRecord) ProtoMessage()    {}
func (*ClaimRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e72b918829c6d483, []int{0}
}
func (m *ClaimRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRecord.Merge(m, src)
}
func (m *ClaimRecord) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRecord proto.InternalMessageInfo

func (m *ClaimRecord) GetOldAddress() string {
	if m != nil {
		return m.OldAddress
	}
	return ""
}

func (m *ClaimRecord) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *ClaimRecord) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *ClaimRecord) GetClaimTime() int64 {
	if m != nil {
		return m.ClaimTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ClaimRecord)(nil), "lumera.claim.ClaimRecord")
}

func init() { proto.RegisterFile("lumera/claim/claim_record.proto", fileDescriptor_e72b918829c6d483) }

var fileDescriptor_e72b918829c6d483 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xb1, 0x4e, 0xe3, 0x40,
	0x10, 0xf5, 0x5e, 0x4e, 0x97, 0x8b, 0x93, 0xe2, 0xce, 0xa2, 0x30, 0x11, 0x5a, 0x5b, 0x54, 0x56,
	0x24, 0x76, 0x15, 0xf8, 0x02, 0x12, 0x09, 0x51, 0x50, 0x20, 0x8b, 0x8a, 0x26, 0x5a, 0xaf, 0x17,
	0x63, 0xe1, 0xf5, 0x44, 0x5e, 0x07, 0x11, 0xf1, 0x13, 0xd4, 0x7c, 0x01, 0xa2, 0xca, 0x67, 0xa4,
	0x4c, 0x49, 0x15, 0x50, 0x52, 0x44, 0xa2, 0xe6, 0x03, 0x90, 0xd7, 0x1b, 0x91, 0x66, 0x76, 0xe6,
	0xcd, 0x5b, 0xcd, 0x9b, 0x79, 0xb6, 0x97, 0x4d, 0xa4, 0x28, 0x18, 0xe5, 0x19, 0x4b, 0x65, 0x1d,
	0x47, 0x85, 0xe0, 0x50, 0xc4, 0x64, 0x5c, 0x40, 0x09, 0x4e, 0xa7, 0x26, 0x10, 0xdd, 0xea, 0xee,
	0x25, 0x90, 0x80, 0x6e, 0xd0, 0x2a, 0xab, 0x39, 0x5d, 0xcc, 0x41, 0x49, 0x50, 0x34, 0x62, 0x4a,
	0xd0, 0xfb, 0x7e, 0x24, 0x4a, 0xd6, 0xa7, 0x1c, 0xd2, 0xdc, 0xf4, 0xff, 0x33, 0x99, 0xe6, 0x40,
	0x75, 0x34, 0x90, 0x97, 0x00, 0x24, 0x99, 0xa0, 0xba, 0x8a, 0x26, 0x37, 0xb4, 0x4c, 0xa5, 0x50,
	0x25, 0x93, 0xe3, 0x9a, 0x70, 0xf8, 0x85, 0xec, 0xf6, 0xb0, 0x9a, 0x19, 0x6a, 0x35, 0x0e, 0xb6,
	0x6d, 0xc8, 0xe2, 0xd3, 0x38, 0x2e, 0x84, 0x52, 0x2e, 0xf2, 0x51, 0xd0, 0x0a, 0x77, 0x10, 0xe7,
	0xd1, 0x6e, 0x46, 0x2c, 0x63, 0x39, 0x17, 0xee, 0x2f, 0xbf, 0x11, 0xb4, 0x8f, 0xf7, 0x49, 0xad,
	0x8a, 0x54, 0xaa, 0x88, 0x51, 0x45, 0x86, 0x90, 0xe6, 0x83, 0xb3, 0xf9, 0xd2, 0xb3, 0x5e, 0xdf,
	0xbd, 0x20, 0x49, 0xcb, 0xdb, 0x49, 0x44, 0x38, 0x48, 0x6a, 0x56, 0xa8, 0x9f, 0x23, 0x15, 0xdf,
	0xd1, 0x72, 0x3a, 0x16, 0x4a, 0x7f, 0x50, 0xcf, 0x9b, 0x59, 0xaf, 0x93, 0x89, 0x84, 0xf1, 0xe9,
	0xa8, 0xda, 0x4b, 0xbd, 0x6c, 0x66, 0x3d, 0x14, 0x6e, 0x27, 0x3a, 0x3d, 0xbb, 0xa9, 0xef, 0x23,
	0x62, 0xb7, 0xe1, 0xa3, 0xe0, 0xef, 0xe0, 0xdf, 0xe7, 0xd2, 0xdb, 0x42, 0x86, 0x6b, 0x2a, 0xe7,
	0xc0, 0x6e, 0xe9, 0xf4, 0x2a, 0x95, 0xc2, 0xfd, 0xed, 0xa3, 0xa0, 0x11, 0xfe, 0x00, 0x83, 0xf3,
	0xf9, 0x0a, 0xa3, 0xc5, 0x0a, 0xa3, 0x8f, 0x15, 0x46, 0x4f, 0x6b, 0x6c, 0x2d, 0xd6, 0xd8, 0x7a,
	0x5b, 0x63, 0xeb, 0x9a, 0xec, 0x88, 0xbd, 0xd0, 0x9e, 0x5c, 0x56, 0x87, 0xe2, 0x90, 0x51, 0xe3,
	0xe1, 0x83, 0x71, 0x51, 0x0b, 0x8f, 0xfe, 0xe8, 0x3b, 0x9e, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x18, 0x4a, 0x63, 0xc7, 0xe2, 0x01, 0x00, 0x00,
}

func (m *ClaimRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimTime != 0 {
		i = encodeVarintClaimRecord(dAtA, i, uint64(m.ClaimTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaimRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OldAddress) > 0 {
		i -= len(m.OldAddress)
		copy(dAtA[i:], m.OldAddress)
		i = encodeVarintClaimRecord(dAtA, i, uint64(len(m.OldAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaimRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaimRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldAddress)
	if l > 0 {
		n += 1 + l + sovClaimRecord(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovClaimRecord(uint64(l))
		}
	}
	if m.Claimed {
		n += 2
	}
	if m.ClaimTime != 0 {
		n += 1 + sovClaimRecord(uint64(m.ClaimTime))
	}
	return n
}

func sovClaimRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaimRecord(x uint64) (n int) {
	return sovClaimRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTime", wireType)
			}
			m.ClaimTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClaimRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaimRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaimRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaimRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaimRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaimRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaimRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaimRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaimRecord = fmt.Errorf("proto: unexpected end of group")
)
