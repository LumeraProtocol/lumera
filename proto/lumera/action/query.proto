syntax = "proto3";

package lumera.action;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lumera/action/params.proto";
import "lumera/action/action_type.proto";
import "lumera/action/action_state.proto";
import "lumera/action/action.proto";

option go_package = "github.com/LumeraProtocol/lumera/x/action/v1/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/params";
  
  }
  
  // GetAction queries a single action by ID.
  rpc GetAction (QueryGetActionRequest) returns (QueryGetActionResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/get_action/{actionID}";
  
  }
  
  // Queries a list of GetActionFee items.
  rpc GetActionFee (QueryGetActionFeeRequest) returns (QueryGetActionFeeResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/get_action_fee/{dataSize}";
  
  }

  // List actions with optional type and state filters.
  rpc ListActions (QueryListActionsRequest) returns (QueryListActionsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/list_actions";
  }

  // List actions for a specific supernode.
  rpc ListActionsBySuperNode (QueryListActionsBySuperNodeRequest) returns (QueryListActionsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/list_actions_by_supernode/{superNodeAddress}";
  }

  // List actions created at a specific block height.
  rpc ListActionsByBlockHeight (QueryListActionsByBlockHeightRequest) returns (QueryListActionsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/list_actions_by_block_height/{blockHeight}";
  }

  // List expired actions.
  rpc ListExpiredActions (QueryListExpiredActionsRequest) returns (QueryListActionsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/list_expired_actions";
  }

  // Query actions based on metadata.
  rpc QueryActionByMetadata (QueryActionByMetadataRequest) returns (QueryListActionsResponse) {
    option (google.api.http).get = "/LumeraProtocol/lumera/action/query_action_by_metadata";
  }
  
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// Request type for GetAction
message QueryGetActionRequest {
  string actionID = 1; // The ID of the action to query
}

// Response type for GetAction
message QueryGetActionResponse {
  Action action = 1;
}

message QueryGetActionFeeRequest {
  string dataSize = 1;
}

message QueryGetActionFeeResponse {
  string amount = 1;
}

// List actions with optional type and state filters
message QueryListActionsRequest {
  ActionType actionType = 1;
  ActionState actionState = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryListActionsResponse {
  repeated Action actions = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
  uint64 total = 3;
}

// List actions for a specific supernode
message QueryListActionsBySuperNodeRequest {
  string superNodeAddress = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// List actions by block height
message QueryListActionsByBlockHeightRequest {
  int64 blockHeight = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// List expired actions
message QueryListExpiredActionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// Query actions by metadata field
message QueryActionByMetadataRequest {
  ActionType actionType = 1;
  string metadataQuery = 2; // e.g., "field=value"
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}
