// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/action/metadata.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SenseMetadata contains information for Sense actions.
// This metadata is directly embedded in the Action.metadata field.
// For RequestAction:
//   - Required: data_hash, dd_and_fingerprints_ic
//   - Optional: collection_id, group_id
//
// Keeper will add:
//   - dd_and_fingerprints_max (from module params)
//
// For FinalizeAction:
//   - Required: dd_and_fingerprints_ids, signatures
type SenseMetadata struct {
	// RequestAction required fields
	DataHash            string `protobuf:"bytes,1,opt,name=data_hash,proto3" json:"data_hash,omitempty"`
	DdAndFingerprintsIc uint64 `protobuf:"varint,2,opt,name=dd_and_fingerprints_ic,proto3" json:"dd_and_fingerprints_ic,omitempty"`
	// RequestAction optional fields
	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,proto3" json:"collection_id,omitempty"`
	GroupId      string `protobuf:"bytes,4,opt,name=group_id,proto3" json:"group_id,omitempty"`
	// Added by Keeper
	DdAndFingerprintsMax uint64 `protobuf:"varint,5,opt,name=dd_and_fingerprints_max,proto3" json:"dd_and_fingerprints_max,omitempty"`
	// FinalizeAction fields
	DdAndFingerprintsIds []string `protobuf:"bytes,6,rep,name=dd_and_fingerprints_ids,proto3" json:"dd_and_fingerprints_ids,omitempty"`
	Signatures           string   `protobuf:"bytes,7,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *SenseMetadata) Reset()         { *m = SenseMetadata{} }
func (m *SenseMetadata) String() string { return proto.CompactTextString(m) }
func (*SenseMetadata) ProtoMessage()    {}
func (*SenseMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_81df3bd9a8bf3d73, []int{0}
}
func (m *SenseMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SenseMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SenseMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SenseMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SenseMetadata.Merge(m, src)
}
func (m *SenseMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SenseMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SenseMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SenseMetadata proto.InternalMessageInfo

func (m *SenseMetadata) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *SenseMetadata) GetDdAndFingerprintsIc() uint64 {
	if m != nil {
		return m.DdAndFingerprintsIc
	}
	return 0
}

func (m *SenseMetadata) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *SenseMetadata) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *SenseMetadata) GetDdAndFingerprintsMax() uint64 {
	if m != nil {
		return m.DdAndFingerprintsMax
	}
	return 0
}

func (m *SenseMetadata) GetDdAndFingerprintsIds() []string {
	if m != nil {
		return m.DdAndFingerprintsIds
	}
	return nil
}

func (m *SenseMetadata) GetSignatures() string {
	if m != nil {
		return m.Signatures
	}
	return ""
}

// CascadeMetadata contains information for Cascade actions.
// This metadata is directly embedded in the Action.metadata field.
// For RequestAction:
//   - Required: data_hash, file_name, rq_ids_ic, signatures
//
// Keeper will add:
//   - rq_ids_max (from module params)
//
// For FinalizeAction:
//   - Required: rq_ids_ids
type CascadeMetadata struct {
	// RequestAction required fields
	DataHash string `protobuf:"bytes,1,opt,name=data_hash,proto3" json:"data_hash,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=file_name,proto3" json:"file_name,omitempty"`
	RqIdsIc  uint64 `protobuf:"varint,3,opt,name=rq_ids_ic,proto3" json:"rq_ids_ic,omitempty"`
	// Added by Keeper
	RqIdsMax uint64 `protobuf:"varint,4,opt,name=rq_ids_max,proto3" json:"rq_ids_max,omitempty"`
	// FinalizeAction fields
	RqIdsIds []string `protobuf:"bytes,5,rep,name=rq_ids_ids,proto3" json:"rq_ids_ids,omitempty"`
	// RequestAction required field
	Signatures string `protobuf:"bytes,6,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *CascadeMetadata) Reset()         { *m = CascadeMetadata{} }
func (m *CascadeMetadata) String() string { return proto.CompactTextString(m) }
func (*CascadeMetadata) ProtoMessage()    {}
func (*CascadeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_81df3bd9a8bf3d73, []int{1}
}
func (m *CascadeMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CascadeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CascadeMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CascadeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CascadeMetadata.Merge(m, src)
}
func (m *CascadeMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CascadeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CascadeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CascadeMetadata proto.InternalMessageInfo

func (m *CascadeMetadata) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *CascadeMetadata) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *CascadeMetadata) GetRqIdsIc() uint64 {
	if m != nil {
		return m.RqIdsIc
	}
	return 0
}

func (m *CascadeMetadata) GetRqIdsMax() uint64 {
	if m != nil {
		return m.RqIdsMax
	}
	return 0
}

func (m *CascadeMetadata) GetRqIdsIds() []string {
	if m != nil {
		return m.RqIdsIds
	}
	return nil
}

func (m *CascadeMetadata) GetSignatures() string {
	if m != nil {
		return m.Signatures
	}
	return ""
}

func init() {
	proto.RegisterType((*SenseMetadata)(nil), "lumera.action.SenseMetadata")
	proto.RegisterType((*CascadeMetadata)(nil), "lumera.action.CascadeMetadata")
}

func init() { proto.RegisterFile("lumera/action/metadata.proto", fileDescriptor_81df3bd9a8bf3d73) }

var fileDescriptor_81df3bd9a8bf3d73 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x6a, 0xeb, 0x30,
	0x14, 0xc6, 0xa3, 0xc4, 0xc9, 0xbd, 0x16, 0x84, 0x0b, 0xe2, 0xd2, 0x9a, 0x10, 0x9c, 0x10, 0x32,
	0x64, 0x8a, 0x87, 0x42, 0xe9, 0x9c, 0x4e, 0x85, 0x16, 0x8a, 0xbb, 0x75, 0x31, 0x8a, 0xa5, 0x38,
	0x02, 0x5b, 0x72, 0x25, 0x19, 0xd2, 0xb7, 0xe8, 0xfb, 0xf4, 0x05, 0x32, 0xa6, 0x5b, 0xa7, 0x52,
	0x92, 0x17, 0x29, 0x92, 0xd3, 0xfc, 0xa3, 0x86, 0x4e, 0xb2, 0xbe, 0xdf, 0xf1, 0xd1, 0xf9, 0x0e,
	0x1f, 0xec, 0xa6, 0x45, 0x46, 0x25, 0x0e, 0x70, 0xac, 0x99, 0xe0, 0x41, 0x46, 0x35, 0x26, 0x58,
	0xe3, 0x71, 0x2e, 0x85, 0x16, 0xa8, 0x5d, 0xd2, 0x71, 0x49, 0x3b, 0xff, 0x13, 0x91, 0x08, 0x4b,
	0x02, 0xf3, 0x55, 0x16, 0x75, 0x7a, 0xc7, 0x2d, 0xca, 0x23, 0xd2, 0xcf, 0x39, 0x2d, 0x0b, 0x06,
	0xaf, 0x75, 0xd8, 0x7e, 0xa0, 0x5c, 0xd1, 0xbb, 0x6d, 0x77, 0xd4, 0x85, 0xae, 0x39, 0xa3, 0x39,
	0x56, 0x73, 0x0f, 0xf4, 0xc1, 0xc8, 0x0d, 0xf7, 0x02, 0xba, 0x84, 0x67, 0x84, 0x44, 0x98, 0x93,
	0x68, 0xc6, 0x78, 0x42, 0x65, 0x2e, 0x19, 0xd7, 0x2a, 0x62, 0xb1, 0x57, 0xef, 0x83, 0x91, 0x13,
	0x56, 0x50, 0x34, 0x84, 0xed, 0x58, 0xa4, 0x29, 0x2d, 0x07, 0x60, 0xc4, 0x6b, 0xd8, 0xce, 0xc7,
	0x22, 0xea, 0xc0, 0xbf, 0x89, 0x14, 0x45, 0x6e, 0x0a, 0x1c, 0x5b, 0xb0, 0xbb, 0xa3, 0x2b, 0x78,
	0xfe, 0x53, 0xef, 0x0c, 0x2f, 0xbc, 0xa6, 0x7d, 0xba, 0x0a, 0x57, 0xfd, 0xc9, 0x88, 0xf2, 0x5a,
	0xfd, 0xc6, 0xc8, 0x0d, 0xab, 0x30, 0xf2, 0x21, 0x54, 0x2c, 0xe1, 0x58, 0x17, 0x92, 0x2a, 0xef,
	0x8f, 0x9d, 0xe8, 0x40, 0x19, 0xbc, 0x01, 0xf8, 0xef, 0x1a, 0xab, 0x18, 0x93, 0xdf, 0xee, 0xaf,
	0x0b, 0xdd, 0x19, 0x4b, 0x69, 0xc4, 0x71, 0x46, 0xed, 0xca, 0xdc, 0x70, 0x2f, 0x18, 0x2a, 0x9f,
	0xcc, 0xcb, 0x66, 0xa1, 0x0d, 0xeb, 0x6a, 0x2f, 0x98, 0x69, 0xb6, 0x17, 0x63, 0xda, 0xb1, 0xf8,
	0x40, 0x41, 0xc3, 0x1d, 0x37, 0xd6, 0x9a, 0xc6, 0xda, 0xc4, 0x59, 0x7e, 0xf4, 0x40, 0x78, 0xa0,
	0x9f, 0x78, 0x6a, 0x9d, 0x7a, 0x9a, 0xdc, 0x2c, 0xd7, 0x3e, 0x58, 0xad, 0x7d, 0xf0, 0xb9, 0xf6,
	0xc1, 0xcb, 0xc6, 0xaf, 0xad, 0x36, 0x7e, 0xed, 0x7d, 0xe3, 0xd7, 0x1e, 0x83, 0x84, 0xe9, 0x79,
	0x31, 0x1d, 0xc7, 0x22, 0x0b, 0x6e, 0x6d, 0xae, 0xee, 0x4d, 0x86, 0x62, 0x91, 0x06, 0xdb, 0x98,
	0x2d, 0xbe, 0x83, 0x66, 0x12, 0xa6, 0xa6, 0x2d, 0x9b, 0xb1, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0x39, 0x74, 0xfd, 0xc9, 0x02, 0x00, 0x00,
}

func (m *SenseMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SenseMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SenseMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		i -= len(m.Signatures)
		copy(dAtA[i:], m.Signatures)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Signatures)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DdAndFingerprintsIds) > 0 {
		for iNdEx := len(m.DdAndFingerprintsIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DdAndFingerprintsIds[iNdEx])
			copy(dAtA[i:], m.DdAndFingerprintsIds[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.DdAndFingerprintsIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DdAndFingerprintsMax != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DdAndFingerprintsMax))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DdAndFingerprintsIc != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.DdAndFingerprintsIc))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CascadeMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CascadeMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		i -= len(m.Signatures)
		copy(dAtA[i:], m.Signatures)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Signatures)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RqIdsIds) > 0 {
		for iNdEx := len(m.RqIdsIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RqIdsIds[iNdEx])
			copy(dAtA[i:], m.RqIdsIds[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.RqIdsIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RqIdsMax != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.RqIdsMax))
		i--
		dAtA[i] = 0x20
	}
	if m.RqIdsIc != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.RqIdsIc))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SenseMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.DdAndFingerprintsIc != 0 {
		n += 1 + sovMetadata(uint64(m.DdAndFingerprintsIc))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.DdAndFingerprintsMax != 0 {
		n += 1 + sovMetadata(uint64(m.DdAndFingerprintsMax))
	}
	if len(m.DdAndFingerprintsIds) > 0 {
		for _, s := range m.DdAndFingerprintsIds {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.Signatures)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *CascadeMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.RqIdsIc != 0 {
		n += 1 + sovMetadata(uint64(m.RqIdsIc))
	}
	if m.RqIdsMax != 0 {
		n += 1 + sovMetadata(uint64(m.RqIdsMax))
	}
	if len(m.RqIdsIds) > 0 {
		for _, s := range m.RqIdsIds {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.Signatures)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SenseMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SenseMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SenseMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdAndFingerprintsIc", wireType)
			}
			m.DdAndFingerprintsIc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DdAndFingerprintsIc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdAndFingerprintsMax", wireType)
			}
			m.DdAndFingerprintsMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DdAndFingerprintsMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdAndFingerprintsIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdAndFingerprintsIds = append(m.DdAndFingerprintsIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RqIdsIc", wireType)
			}
			m.RqIdsIc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RqIdsIc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RqIdsMax", wireType)
			}
			m.RqIdsMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RqIdsMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RqIdsIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RqIdsIds = append(m.RqIdsIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
