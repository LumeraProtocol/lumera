// Copyright (c) 2024-2025 The Lumera developers
//

// Code generated by MockGen. DO NOT EDIT.
// Source: legroast.go

// Package lumeraidmocks is a generated GoMock package.
package lumeraidmocks

import (
	reflect "reflect"

	legroast "github.com/LumeraProtocol/lumera/x/lumeraid/legroast"
	gomock "github.com/golang/mock/gomock"
)

// MockLegRoastInterface is a mock of LegRoastInterface interface.
type MockLegRoastInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLegRoastInterfaceMockRecorder
}

// MockLegRoastInterfaceMockRecorder is the mock recorder for MockLegRoastInterface.
type MockLegRoastInterfaceMockRecorder struct {
	mock *MockLegRoastInterface
}

// NewMockLegRoastInterface creates a new mock instance.
func NewMockLegRoastInterface(ctrl *gomock.Controller) *MockLegRoastInterface {
	mock := &MockLegRoastInterface{ctrl: ctrl}
	mock.recorder = &MockLegRoastInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegRoastInterface) EXPECT() *MockLegRoastInterfaceMockRecorder {
	return m.recorder
}

// Keygen mocks base method.
func (m *MockLegRoastInterface) Keygen(seed []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keygen", seed)
	ret0, _ := ret[0].(error)
	return ret0
}

// Keygen indicates an expected call of Keygen.
func (mr *MockLegRoastInterfaceMockRecorder) Keygen(seed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keygen", reflect.TypeOf((*MockLegRoastInterface)(nil).Keygen), seed)
}

// Params mocks base method.
func (m *MockLegRoastInterface) Params() *legroast.LegRoastParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(*legroast.LegRoastParams)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockLegRoastInterfaceMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockLegRoastInterface)(nil).Params))
}

// PublicKey mocks base method.
func (m *MockLegRoastInterface) PublicKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockLegRoastInterfaceMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockLegRoastInterface)(nil).PublicKey))
}

// SetPublicKey mocks base method.
func (m *MockLegRoastInterface) SetPublicKey(pk []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPublicKey", pk)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPublicKey indicates an expected call of SetPublicKey.
func (mr *MockLegRoastInterfaceMockRecorder) SetPublicKey(pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicKey", reflect.TypeOf((*MockLegRoastInterface)(nil).SetPublicKey), pk)
}

// Sign mocks base method.
func (m *MockLegRoastInterface) Sign(message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockLegRoastInterfaceMockRecorder) Sign(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockLegRoastInterface)(nil).Sign), message)
}

// Verify mocks base method.
func (m *MockLegRoastInterface) Verify(message, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", message, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockLegRoastInterfaceMockRecorder) Verify(message, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockLegRoastInterface)(nil).Verify), message, signature)
}
