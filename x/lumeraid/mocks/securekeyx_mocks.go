// Copyright (c) 2024-2025 The Lumera developers
//

// Code generated by MockGen. DO NOT EDIT.
// Source: securekeyx.go

// Package lumeraidmocks is a generated GoMock package.
package lumeraidmocks

import (
	context "context"
	reflect "reflect"

	securekeyx "github.com/LumeraProtocol/lumera/x/lumeraid/securekeyx"
	types "github.com/LumeraProtocol/lumera/x/supernode/v1/types"
	types0 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockKeyExchanger is a mock of KeyExchanger interface.
type MockKeyExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockKeyExchangerMockRecorder
}

// MockKeyExchangerMockRecorder is the mock recorder for MockKeyExchanger.
type MockKeyExchangerMockRecorder struct {
	mock *MockKeyExchanger
}

// NewMockKeyExchanger creates a new mock instance.
func NewMockKeyExchanger(ctrl *gomock.Controller) *MockKeyExchanger {
	mock := &MockKeyExchanger{ctrl: ctrl}
	mock.recorder = &MockKeyExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyExchanger) EXPECT() *MockKeyExchangerMockRecorder {
	return m.recorder
}

// ComputeSharedSecret mocks base method.
func (m *MockKeyExchanger) ComputeSharedSecret(handshakeBytes, signature []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeSharedSecret", handshakeBytes, signature)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeSharedSecret indicates an expected call of ComputeSharedSecret.
func (mr *MockKeyExchangerMockRecorder) ComputeSharedSecret(handshakeBytes, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeSharedSecret", reflect.TypeOf((*MockKeyExchanger)(nil).ComputeSharedSecret), handshakeBytes, signature)
}

// CreateRequest mocks base method.
func (m *MockKeyExchanger) CreateRequest(remoteAddress string) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", remoteAddress)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockKeyExchangerMockRecorder) CreateRequest(remoteAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockKeyExchanger)(nil).CreateRequest), remoteAddress)
}

// LocalAddress mocks base method.
func (m *MockKeyExchanger) LocalAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// LocalAddress indicates an expected call of LocalAddress.
func (mr *MockKeyExchangerMockRecorder) LocalAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddress", reflect.TypeOf((*MockKeyExchanger)(nil).LocalAddress))
}

// PeerType mocks base method.
func (m *MockKeyExchanger) PeerType() securekeyx.PeerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerType")
	ret0, _ := ret[0].(securekeyx.PeerType)
	return ret0
}

// PeerType indicates an expected call of PeerType.
func (mr *MockKeyExchangerMockRecorder) PeerType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerType", reflect.TypeOf((*MockKeyExchanger)(nil).PeerType))
}

// MockKeyExchangerValidator is a mock of KeyExchangerValidator interface.
type MockKeyExchangerValidator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyExchangerValidatorMockRecorder
}

// MockKeyExchangerValidatorMockRecorder is the mock recorder for MockKeyExchangerValidator.
type MockKeyExchangerValidatorMockRecorder struct {
	mock *MockKeyExchangerValidator
}

// NewMockKeyExchangerValidator creates a new mock instance.
func NewMockKeyExchangerValidator(ctrl *gomock.Controller) *MockKeyExchangerValidator {
	mock := &MockKeyExchangerValidator{ctrl: ctrl}
	mock.recorder = &MockKeyExchangerValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyExchangerValidator) EXPECT() *MockKeyExchangerValidatorMockRecorder {
	return m.recorder
}

// AccountInfoByAddress mocks base method.
func (m *MockKeyExchangerValidator) AccountInfoByAddress(ctx context.Context, addr string) (*types0.QueryAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfoByAddress", ctx, addr)
	ret0, _ := ret[0].(*types0.QueryAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfoByAddress indicates an expected call of AccountInfoByAddress.
func (mr *MockKeyExchangerValidatorMockRecorder) AccountInfoByAddress(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfoByAddress", reflect.TypeOf((*MockKeyExchangerValidator)(nil).AccountInfoByAddress), ctx, addr)
}

// GetSupernodeBySupernodeAddress mocks base method.
func (m *MockKeyExchangerValidator) GetSupernodeBySupernodeAddress(ctx context.Context, address string) (*types.SuperNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupernodeBySupernodeAddress", ctx, address)
	ret0, _ := ret[0].(*types.SuperNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupernodeBySupernodeAddress indicates an expected call of GetSupernodeBySupernodeAddress.
func (mr *MockKeyExchangerValidatorMockRecorder) GetSupernodeBySupernodeAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupernodeBySupernodeAddress", reflect.TypeOf((*MockKeyExchangerValidator)(nil).GetSupernodeBySupernodeAddress), ctx, address)
}
