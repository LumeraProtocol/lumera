// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/lumeraid/handshake_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HandshakeInfo message
type HandshakeInfo struct {
	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PeerType         int32  `protobuf:"varint,2,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PublicKey        []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AccountPublicKey []byte `protobuf:"bytes,4,opt,name=account_public_key,json=accountPublicKey,proto3" json:"account_public_key,omitempty"`
	Curve            string `protobuf:"bytes,5,opt,name=curve,proto3" json:"curve,omitempty"`
}

func (m *HandshakeInfo) Reset()         { *m = HandshakeInfo{} }
func (m *HandshakeInfo) String() string { return proto.CompactTextString(m) }
func (*HandshakeInfo) ProtoMessage()    {}
func (*HandshakeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_af18cdb5b689e73b, []int{0}
}
func (m *HandshakeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HandshakeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HandshakeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HandshakeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeInfo.Merge(m, src)
}
func (m *HandshakeInfo) XXX_Size() int {
	return m.Size()
}
func (m *HandshakeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeInfo proto.InternalMessageInfo

func (m *HandshakeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HandshakeInfo) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *HandshakeInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *HandshakeInfo) GetAccountPublicKey() []byte {
	if m != nil {
		return m.AccountPublicKey
	}
	return nil
}

func (m *HandshakeInfo) GetCurve() string {
	if m != nil {
		return m.Curve
	}
	return ""
}

func init() {
	proto.RegisterType((*HandshakeInfo)(nil), "lumera.lumeraid.HandshakeInfo")
}

func init() {
	proto.RegisterFile("lumera/lumeraid/handshake_info.proto", fileDescriptor_af18cdb5b689e73b)
}

var fileDescriptor_af18cdb5b689e73b = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0x29, 0xcd, 0x4d,
	0x2d, 0x4a, 0xd4, 0x87, 0x50, 0x99, 0x29, 0xfa, 0x19, 0x89, 0x79, 0x29, 0xc5, 0x19, 0x89, 0xd9,
	0xa9, 0xf1, 0x99, 0x79, 0x69, 0xf9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xfc, 0x10, 0x69,
	0x3d, 0x98, 0x2a, 0xa5, 0x95, 0x8c, 0x5c, 0xbc, 0x1e, 0x30, 0x95, 0x9e, 0x79, 0x69, 0xf9, 0x42,
	0x12, 0x5c, 0xec, 0x89, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x30, 0xae, 0x90, 0x34, 0x17, 0x67, 0x41, 0x6a, 0x6a, 0x51, 0x7c, 0x49, 0x65, 0x41, 0xaa,
	0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x07, 0x48, 0x20, 0xa4, 0xb2, 0x20, 0x55, 0x48, 0x96,
	0x8b, 0xab, 0xa0, 0x34, 0x29, 0x27, 0x33, 0x39, 0x3e, 0x3b, 0xb5, 0x52, 0x82, 0x59, 0x81, 0x51,
	0x83, 0x27, 0x88, 0x13, 0x22, 0xe2, 0x9d, 0x5a, 0x29, 0xa4, 0xc3, 0x25, 0x94, 0x98, 0x9c, 0x9c,
	0x5f, 0x9a, 0x57, 0x12, 0x8f, 0xa4, 0x8c, 0x05, 0xac, 0x4c, 0x00, 0x2a, 0x13, 0x00, 0x57, 0x2d,
	0xc2, 0xc5, 0x9a, 0x5c, 0x5a, 0x54, 0x96, 0x2a, 0xc1, 0x0a, 0x76, 0x01, 0x84, 0xe3, 0xa4, 0x75,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7,
	0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x02, 0x15, 0x08, 0x7f, 0x83, 0x5c,
	0x57, 0x9c, 0xc4, 0x06, 0xf6, 0xaf, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xd8, 0x65, 0x83,
	0x17, 0x01, 0x00, 0x00,
}

func (m *HandshakeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandshakeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HandshakeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curve) > 0 {
		i -= len(m.Curve)
		copy(dAtA[i:], m.Curve)
		i = encodeVarintHandshakeInfo(dAtA, i, uint64(len(m.Curve)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccountPublicKey) > 0 {
		i -= len(m.AccountPublicKey)
		copy(dAtA[i:], m.AccountPublicKey)
		i = encodeVarintHandshakeInfo(dAtA, i, uint64(len(m.AccountPublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintHandshakeInfo(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PeerType != 0 {
		i = encodeVarintHandshakeInfo(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintHandshakeInfo(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHandshakeInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovHandshakeInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HandshakeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHandshakeInfo(uint64(l))
	}
	if m.PeerType != 0 {
		n += 1 + sovHandshakeInfo(uint64(m.PeerType))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovHandshakeInfo(uint64(l))
	}
	l = len(m.AccountPublicKey)
	if l > 0 {
		n += 1 + l + sovHandshakeInfo(uint64(l))
	}
	l = len(m.Curve)
	if l > 0 {
		n += 1 + l + sovHandshakeInfo(uint64(l))
	}
	return n
}

func sovHandshakeInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHandshakeInfo(x uint64) (n int) {
	return sovHandshakeInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HandshakeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandshakeInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandshakeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandshakeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPublicKey = append(m.AccountPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountPublicKey == nil {
				m.AccountPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandshakeInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHandshakeInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHandshakeInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHandshakeInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandshakeInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHandshakeInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHandshakeInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHandshakeInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHandshakeInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHandshakeInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHandshakeInfo = fmt.Errorf("proto: unexpected end of group")
)
