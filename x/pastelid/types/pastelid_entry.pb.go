// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pasteld/pastelid/pastelid_entry.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PastelidEntry struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IdType    string `protobuf:"bytes,2,opt,name=idType,proto3" json:"idType,omitempty"`
	PastelId  string `protobuf:"bytes,3,opt,name=pastelId,proto3" json:"pastelId,omitempty"`
	PqKey     string `protobuf:"bytes,4,opt,name=pqKey,proto3" json:"pqKey,omitempty"`
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	TimeStamp string `protobuf:"bytes,6,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Version   uint64 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PastelidEntry) Reset()         { *m = PastelidEntry{} }
func (m *PastelidEntry) String() string { return proto.CompactTextString(m) }
func (*PastelidEntry) ProtoMessage()    {}
func (*PastelidEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c29643da2982555, []int{0}
}
func (m *PastelidEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PastelidEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PastelidEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PastelidEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PastelidEntry.Merge(m, src)
}
func (m *PastelidEntry) XXX_Size() int {
	return m.Size()
}
func (m *PastelidEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PastelidEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PastelidEntry proto.InternalMessageInfo

func (m *PastelidEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PastelidEntry) GetIdType() string {
	if m != nil {
		return m.IdType
	}
	return ""
}

func (m *PastelidEntry) GetPastelId() string {
	if m != nil {
		return m.PastelId
	}
	return ""
}

func (m *PastelidEntry) GetPqKey() string {
	if m != nil {
		return m.PqKey
	}
	return ""
}

func (m *PastelidEntry) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *PastelidEntry) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *PastelidEntry) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*PastelidEntry)(nil), "pasteld.pastelid.PastelidEntry")
}

func init() {
	proto.RegisterFile("pasteld/pastelid/pastelid_entry.proto", fileDescriptor_6c29643da2982555)
}

var fileDescriptor_6c29643da2982555 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x48, 0x2c, 0x2e,
	0x49, 0xcd, 0x49, 0xd1, 0x87, 0xd0, 0x99, 0x08, 0x46, 0x7c, 0x6a, 0x5e, 0x49, 0x51, 0xa5, 0x5e,
	0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x00, 0x54, 0x99, 0x1e, 0x4c, 0x56, 0xe9, 0x24, 0x23, 0x17,
	0x6f, 0x00, 0x94, 0xe3, 0x0a, 0x52, 0x29, 0x24, 0xc1, 0xc5, 0x9e, 0x98, 0x92, 0x52, 0x94, 0x5a,
	0x5c, 0x2c, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a, 0x89, 0x71, 0xb1, 0x65, 0xa6,
	0x84, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x81, 0x25, 0xa0, 0x3c, 0x21, 0x29, 0x2e, 0x0e, 0x88, 0x79,
	0x9e, 0x29, 0x12, 0xcc, 0x60, 0x19, 0x38, 0x5f, 0x48, 0x84, 0x8b, 0xb5, 0xa0, 0xd0, 0x3b, 0xb5,
	0x52, 0x82, 0x05, 0x2c, 0x01, 0xe1, 0x08, 0xc9, 0x70, 0x71, 0x16, 0x67, 0xa6, 0xe7, 0x25, 0x96,
	0x94, 0x16, 0xa5, 0x4a, 0xb0, 0x82, 0x65, 0x10, 0x02, 0x20, 0xd9, 0x92, 0xcc, 0xdc, 0xd4, 0xe0,
	0x92, 0xc4, 0xdc, 0x02, 0x09, 0x36, 0x88, 0x2c, 0x5c, 0x00, 0xe4, 0xbe, 0xb2, 0xd4, 0xa2, 0xe2,
	0xcc, 0xfc, 0x3c, 0x09, 0x76, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x18, 0xd7, 0xc9, 0xfb, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x0c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xa1, 0x01, 0x93, 0x97, 0x5a, 0x52, 0x9e, 0x5f, 0x94, 0xad, 0x0f, 0x0b, 0xb7,
	0x0a, 0x44, 0xc8, 0x95, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x43, 0xcc, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xf2, 0xab, 0xe8, 0x75, 0x5a, 0x01, 0x00, 0x00,
}

func (m *PastelidEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PastelidEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PastelidEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintPastelidEntry(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TimeStamp) > 0 {
		i -= len(m.TimeStamp)
		copy(dAtA[i:], m.TimeStamp)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.TimeStamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PqKey) > 0 {
		i -= len(m.PqKey)
		copy(dAtA[i:], m.PqKey)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.PqKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PastelId) > 0 {
		i -= len(m.PastelId)
		copy(dAtA[i:], m.PastelId)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.PastelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdType) > 0 {
		i -= len(m.IdType)
		copy(dAtA[i:], m.IdType)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.IdType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPastelidEntry(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPastelidEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovPastelidEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PastelidEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	l = len(m.IdType)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	l = len(m.PastelId)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	l = len(m.PqKey)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovPastelidEntry(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovPastelidEntry(uint64(m.Version))
	}
	return n
}

func sovPastelidEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPastelidEntry(x uint64) (n int) {
	return sovPastelidEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PastelidEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPastelidEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PastelidEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PastelidEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PastelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PastelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PqKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PqKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPastelidEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPastelidEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPastelidEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPastelidEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPastelidEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPastelidEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPastelidEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPastelidEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPastelidEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPastelidEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPastelidEntry = fmt.Errorf("proto: unexpected end of group")
)
