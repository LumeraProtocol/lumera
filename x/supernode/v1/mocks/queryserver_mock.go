// Copyright (c) 2024-2025 The Lumera developers
//

// Code generated by MockGen. DO NOT EDIT.
// Source: query.pb.go

// Package supernodemocks is a generated GoMock package.
package supernodemocks

import (
	context "context"
	reflect "reflect"

	types "github.com/LumeraProtocol/lumera/x/supernode/v1/types"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// GetSuperNode mocks base method.
func (m *MockQueryClient) GetSuperNode(ctx context.Context, in *types.QueryGetSuperNodeRequest, opts ...grpc.CallOption) (*types.QueryGetSuperNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuperNode", varargs...)
	ret0, _ := ret[0].(*types.QueryGetSuperNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperNode indicates an expected call of GetSuperNode.
func (mr *MockQueryClientMockRecorder) GetSuperNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperNode", reflect.TypeOf((*MockQueryClient)(nil).GetSuperNode), varargs...)
}

// GetSuperNodeBySuperNodeAddress mocks base method.
func (m *MockQueryClient) GetSuperNodeBySuperNodeAddress(ctx context.Context, in *types.QueryGetSuperNodeBySuperNodeAddressRequest, opts ...grpc.CallOption) (*types.QueryGetSuperNodeBySuperNodeAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuperNodeBySuperNodeAddress", varargs...)
	ret0, _ := ret[0].(*types.QueryGetSuperNodeBySuperNodeAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperNodeBySuperNodeAddress indicates an expected call of GetSuperNodeBySuperNodeAddress.
func (mr *MockQueryClientMockRecorder) GetSuperNodeBySuperNodeAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperNodeBySuperNodeAddress", reflect.TypeOf((*MockQueryClient)(nil).GetSuperNodeBySuperNodeAddress), varargs...)
}

// GetTopSuperNodesForBlock mocks base method.
func (m *MockQueryClient) GetTopSuperNodesForBlock(ctx context.Context, in *types.QueryGetTopSuperNodesForBlockRequest, opts ...grpc.CallOption) (*types.QueryGetTopSuperNodesForBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopSuperNodesForBlock", varargs...)
	ret0, _ := ret[0].(*types.QueryGetTopSuperNodesForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopSuperNodesForBlock indicates an expected call of GetTopSuperNodesForBlock.
func (mr *MockQueryClientMockRecorder) GetTopSuperNodesForBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopSuperNodesForBlock", reflect.TypeOf((*MockQueryClient)(nil).GetTopSuperNodesForBlock), varargs...)
}

// ListSuperNodes mocks base method.
func (m *MockQueryClient) ListSuperNodes(ctx context.Context, in *types.QueryListSuperNodesRequest, opts ...grpc.CallOption) (*types.QueryListSuperNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuperNodes", varargs...)
	ret0, _ := ret[0].(*types.QueryListSuperNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuperNodes indicates an expected call of ListSuperNodes.
func (mr *MockQueryClientMockRecorder) ListSuperNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuperNodes", reflect.TypeOf((*MockQueryClient)(nil).ListSuperNodes), varargs...)
}

// Params mocks base method.
func (m *MockQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryClientMockRecorder) Params(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryClient)(nil).Params), varargs...)
}

// MockQueryServer is a mock of QueryServer interface.
type MockQueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServerMockRecorder
}

// MockQueryServerMockRecorder is the mock recorder for MockQueryServer.
type MockQueryServerMockRecorder struct {
	mock *MockQueryServer
}

// NewMockQueryServer creates a new mock instance.
func NewMockQueryServer(ctrl *gomock.Controller) *MockQueryServer {
	mock := &MockQueryServer{ctrl: ctrl}
	mock.recorder = &MockQueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryServer) EXPECT() *MockQueryServerMockRecorder {
	return m.recorder
}

// GetSuperNode mocks base method.
func (m *MockQueryServer) GetSuperNode(arg0 context.Context, arg1 *types.QueryGetSuperNodeRequest) (*types.QueryGetSuperNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperNode", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryGetSuperNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperNode indicates an expected call of GetSuperNode.
func (mr *MockQueryServerMockRecorder) GetSuperNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperNode", reflect.TypeOf((*MockQueryServer)(nil).GetSuperNode), arg0, arg1)
}

// GetSuperNodeBySuperNodeAddress mocks base method.
func (m *MockQueryServer) GetSuperNodeBySuperNodeAddress(arg0 context.Context, arg1 *types.QueryGetSuperNodeBySuperNodeAddressRequest) (*types.QueryGetSuperNodeBySuperNodeAddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperNodeBySuperNodeAddress", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryGetSuperNodeBySuperNodeAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperNodeBySuperNodeAddress indicates an expected call of GetSuperNodeBySuperNodeAddress.
func (mr *MockQueryServerMockRecorder) GetSuperNodeBySuperNodeAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperNodeBySuperNodeAddress", reflect.TypeOf((*MockQueryServer)(nil).GetSuperNodeBySuperNodeAddress), arg0, arg1)
}

// GetTopSuperNodesForBlock mocks base method.
func (m *MockQueryServer) GetTopSuperNodesForBlock(arg0 context.Context, arg1 *types.QueryGetTopSuperNodesForBlockRequest) (*types.QueryGetTopSuperNodesForBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopSuperNodesForBlock", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryGetTopSuperNodesForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopSuperNodesForBlock indicates an expected call of GetTopSuperNodesForBlock.
func (mr *MockQueryServerMockRecorder) GetTopSuperNodesForBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopSuperNodesForBlock", reflect.TypeOf((*MockQueryServer)(nil).GetTopSuperNodesForBlock), arg0, arg1)
}

// ListSuperNodes mocks base method.
func (m *MockQueryServer) ListSuperNodes(arg0 context.Context, arg1 *types.QueryListSuperNodesRequest) (*types.QueryListSuperNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuperNodes", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryListSuperNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuperNodes indicates an expected call of ListSuperNodes.
func (mr *MockQueryServerMockRecorder) ListSuperNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuperNodes", reflect.TypeOf((*MockQueryServer)(nil).ListSuperNodes), arg0, arg1)
}

// Params mocks base method.
func (m *MockQueryServer) Params(arg0 context.Context, arg1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryServerMockRecorder) Params(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryServer)(nil).Params), arg0, arg1)
}
