// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/supernode/metrics_aggregate.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetricsAggregate struct {
	Metrics     map[string]float64 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ReportCount uint64             `protobuf:"varint,2,opt,name=report_count,json=reportCount,proto3" json:"report_count,omitempty"`
	Height      int64              `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MetricsAggregate) Reset()         { *m = MetricsAggregate{} }
func (m *MetricsAggregate) String() string { return proto.CompactTextString(m) }
func (*MetricsAggregate) ProtoMessage()    {}
func (*MetricsAggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_438cc5ca9a32c6ea, []int{0}
}
func (m *MetricsAggregate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsAggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsAggregate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsAggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsAggregate.Merge(m, src)
}
func (m *MetricsAggregate) XXX_Size() int {
	return m.Size()
}
func (m *MetricsAggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsAggregate.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsAggregate proto.InternalMessageInfo

func (m *MetricsAggregate) GetMetrics() map[string]float64 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *MetricsAggregate) GetReportCount() uint64 {
	if m != nil {
		return m.ReportCount
	}
	return 0
}

func (m *MetricsAggregate) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*MetricsAggregate)(nil), "lumera.supernode.MetricsAggregate")
	proto.RegisterMapType((map[string]float64)(nil), "lumera.supernode.MetricsAggregate.MetricsEntry")
}

func init() {
	proto.RegisterFile("lumera/supernode/metrics_aggregate.proto", fileDescriptor_438cc5ca9a32c6ea)
}

var fileDescriptor_438cc5ca9a32c6ea = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4b, 0xc3, 0x40,
	0x14, 0xc6, 0x7b, 0x8d, 0x56, 0xbc, 0x76, 0x28, 0x47, 0x91, 0xd0, 0xe1, 0x8c, 0x4e, 0x99, 0x72,
	0xa8, 0x08, 0xd2, 0x4d, 0xc5, 0x41, 0x50, 0x94, 0x8c, 0x2e, 0x25, 0x8d, 0xcf, 0x4b, 0x30, 0xc9,
	0x85, 0xcb, 0x5d, 0x31, 0xff, 0x85, 0x7f, 0x96, 0x63, 0x07, 0x07, 0x47, 0x49, 0xfe, 0x11, 0x49,
	0x2e, 0x91, 0xd2, 0xed, 0x7b, 0xdf, 0xbd, 0xef, 0x7d, 0xdc, 0x0f, 0xbb, 0x89, 0x4e, 0x41, 0x06,
	0xac, 0xd0, 0x39, 0xc8, 0x4c, 0xbc, 0x02, 0x4b, 0x41, 0xc9, 0x38, 0x2c, 0x96, 0x01, 0xe7, 0x12,
	0x78, 0xa0, 0xc0, 0xcb, 0xa5, 0x50, 0x82, 0x4c, 0xcd, 0xa6, 0xf7, 0xbf, 0x39, 0x3f, 0xe6, 0x42,
	0xf0, 0x04, 0x58, 0xfb, 0xbe, 0xd2, 0x6f, 0x4c, 0xc5, 0x29, 0x14, 0x2a, 0x48, 0x73, 0x13, 0x99,
	0xcf, 0xb8, 0xe0, 0xa2, 0x95, 0xac, 0x51, 0xc6, 0x3d, 0xfd, 0x46, 0x78, 0xfa, 0x68, 0x4a, 0xae,
	0xfb, 0x0e, 0x72, 0x8f, 0x0f, 0xba, 0x62, 0x1b, 0x39, 0x96, 0x3b, 0x3e, 0x67, 0xde, 0x6e, 0x9f,
	0xb7, 0x1b, 0xea, 0x8d, 0xbb, 0x4c, 0xc9, 0xd2, 0xef, 0xf3, 0xe4, 0x04, 0x4f, 0x24, 0xe4, 0x42,
	0xaa, 0x65, 0x28, 0x74, 0xa6, 0xec, 0xa1, 0x83, 0xdc, 0x3d, 0x7f, 0x6c, 0xbc, 0xdb, 0xc6, 0x22,
	0x47, 0x78, 0x14, 0x41, 0xcc, 0x23, 0x65, 0x5b, 0x0e, 0x72, 0x2d, 0xbf, 0x9b, 0xe6, 0x0b, 0x3c,
	0xd9, 0xbe, 0x49, 0xa6, 0xd8, 0x7a, 0x87, 0xd2, 0x46, 0x0e, 0x72, 0x0f, 0xfd, 0x46, 0x92, 0x19,
	0xde, 0x5f, 0x07, 0x89, 0x86, 0xf6, 0x2a, 0xf2, 0xcd, 0xb0, 0x18, 0x5e, 0xa1, 0x9b, 0xa7, 0xaf,
	0x8a, 0xa2, 0x4d, 0x45, 0xd1, 0x6f, 0x45, 0xd1, 0x67, 0x4d, 0x07, 0x9b, 0x9a, 0x0e, 0x7e, 0x6a,
	0x3a, 0x78, 0xb9, 0xe4, 0xb1, 0x8a, 0xf4, 0xca, 0x0b, 0x45, 0xca, 0x1e, 0xda, 0x4f, 0x3d, 0x37,
	0x20, 0x42, 0x91, 0xb0, 0x8e, 0xfe, 0xc7, 0x16, 0xff, 0xf5, 0x19, 0x53, 0x65, 0x0e, 0xc5, 0x6a,
	0xd4, 0xe2, 0xba, 0xf8, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x73, 0x8c, 0xd6, 0xf2, 0xa3, 0x01, 0x00,
	0x00,
}

func (m *MetricsAggregate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsAggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsAggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMetricsAggregate(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.ReportCount != 0 {
		i = encodeVarintMetricsAggregate(dAtA, i, uint64(m.ReportCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Metrics) > 0 {
		for k := range m.Metrics {
			v := m.Metrics[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMetricsAggregate(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMetricsAggregate(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetricsAggregate(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetricsAggregate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetricsAggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMetricsAggregate(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovMetricsAggregate(uint64(mapEntrySize))
		}
	}
	if m.ReportCount != 0 {
		n += 1 + sovMetricsAggregate(uint64(m.ReportCount))
	}
	if m.Height != 0 {
		n += 1 + sovMetricsAggregate(uint64(m.Height))
	}
	return n
}

func sovMetricsAggregate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetricsAggregate(x uint64) (n int) {
	return sovMetricsAggregate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsAggregate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricsAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsAggregate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsAggregate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetricsAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetricsAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetricsAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetricsAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetricsAggregate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMetricsAggregate
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetricsAggregate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetricsAggregate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metrics[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportCount", wireType)
			}
			m.ReportCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetricsAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetricsAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetricsAggregate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetricsAggregate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricsAggregate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricsAggregate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetricsAggregate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetricsAggregate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetricsAggregate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetricsAggregate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetricsAggregate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetricsAggregate = fmt.Errorf("proto: unexpected end of group")
)
