// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/supernode/super_node.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SuperNode struct {
	ValidatorAddress string                  `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	States           []*SuperNodeStateRecord `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	Evidence         []*Evidence             `protobuf:"bytes,3,rep,name=evidence,proto3" json:"evidence,omitempty"`
	PrevIpAddresses  []*IPAddressHistory     `protobuf:"bytes,4,rep,name=prev_ip_addresses,json=prevIpAddresses,proto3" json:"prev_ip_addresses,omitempty"`
	Version          string                  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Metrics          *MetricsAggregate       `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	SupernodeAccount string                  `protobuf:"bytes,7,opt,name=supernode_account,json=supernodeAccount,proto3" json:"supernode_account,omitempty"`
}

func (m *SuperNode) Reset()         { *m = SuperNode{} }
func (m *SuperNode) String() string { return proto.CompactTextString(m) }
func (*SuperNode) ProtoMessage()    {}
func (*SuperNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad964d60a05f811b, []int{0}
}
func (m *SuperNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperNode.Merge(m, src)
}
func (m *SuperNode) XXX_Size() int {
	return m.Size()
}
func (m *SuperNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperNode.DiscardUnknown(m)
}

var xxx_messageInfo_SuperNode proto.InternalMessageInfo

func (m *SuperNode) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SuperNode) GetStates() []*SuperNodeStateRecord {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *SuperNode) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *SuperNode) GetPrevIpAddresses() []*IPAddressHistory {
	if m != nil {
		return m.PrevIpAddresses
	}
	return nil
}

func (m *SuperNode) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SuperNode) GetMetrics() *MetricsAggregate {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *SuperNode) GetSupernodeAccount() string {
	if m != nil {
		return m.SupernodeAccount
	}
	return ""
}

func init() {
	proto.RegisterType((*SuperNode)(nil), "lumera.supernode.SuperNode")
}

func init() { proto.RegisterFile("lumera/supernode/super_node.proto", fileDescriptor_ad964d60a05f811b) }

var fileDescriptor_ad964d60a05f811b = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x37, 0xae, 0xee, 0xda, 0x78, 0xb0, 0x0d, 0x82, 0x71, 0xc5, 0xb8, 0xed, 0xa1, 0xac,
	0x87, 0xee, 0xb0, 0x8a, 0x9e, 0x44, 0x48, 0x41, 0x68, 0x41, 0x6b, 0xc9, 0x82, 0x07, 0x2f, 0x61,
	0x32, 0x79, 0xa6, 0x03, 0x9b, 0xbc, 0x30, 0x33, 0x09, 0xf6, 0x5b, 0xf8, 0x61, 0xfa, 0x15, 0x04,
	0x8f, 0xa5, 0x27, 0x8f, 0xb2, 0xfb, 0x45, 0x24, 0x99, 0x99, 0x54, 0x36, 0xbd, 0xbd, 0x97, 0xf9,
	0xfd, 0xff, 0xf3, 0xf2, 0x7f, 0xe3, 0xee, 0xaf, 0xaa, 0x1c, 0x04, 0x25, 0xb2, 0x2a, 0x41, 0x14,
	0x98, 0x82, 0xae, 0xe2, 0xa6, 0x9c, 0x97, 0x02, 0x15, 0x7a, 0xbb, 0x1a, 0x99, 0x77, 0xc8, 0x24,
	0x60, 0x28, 0x73, 0x94, 0x24, 0xa1, 0x12, 0x48, 0xbd, 0x48, 0x40, 0xd1, 0x05, 0x61, 0xc8, 0x0b,
	0xad, 0x98, 0x3c, 0xd3, 0xe7, 0x71, 0xdb, 0x11, 0xdd, 0x98, 0xa3, 0x97, 0x19, 0x62, 0xb6, 0x02,
	0xd2, 0x76, 0x49, 0xf5, 0x9d, 0x28, 0x9e, 0x83, 0x54, 0x34, 0x2f, 0x0d, 0xf0, 0x24, 0xc3, 0x0c,
	0xb5, 0xb0, 0xa9, 0xac, 0xac, 0x37, 0x26, 0xd4, 0x3c, 0x85, 0x82, 0x99, 0x21, 0x27, 0xb3, 0x1e,
	0x90, 0x83, 0x12, 0x9c, 0xc9, 0x98, 0x66, 0x99, 0x80, 0x8c, 0x2a, 0x4b, 0xbe, 0xea, 0x91, 0xbc,
	0x8c, 0x69, 0x9a, 0x0a, 0x90, 0x32, 0xbe, 0xe0, 0x52, 0xa1, 0xb8, 0x34, 0xe8, 0xe1, 0xdd, 0xe1,
	0x34, 0x55, 0x2c, 0x55, 0x67, 0x79, 0xf0, 0x6b, 0xe8, 0xee, 0x2c, 0x9b, 0x93, 0x33, 0x4c, 0xc1,
	0x3b, 0x73, 0xf7, 0x6a, 0xba, 0xe2, 0x29, 0x55, 0x28, 0xac, 0xb1, 0xef, 0x4c, 0x9d, 0xd9, 0xce,
	0xf1, 0xfe, 0xcd, 0xd5, 0xd1, 0x0b, 0x93, 0xc7, 0x57, 0xcb, 0x84, 0x1a, 0x59, 0x2a, 0xc1, 0x8b,
	0x2c, 0xda, 0xad, 0xb7, 0xbe, 0x7b, 0x1f, 0xdc, 0x51, 0x7b, 0x99, 0xf4, 0xef, 0x4d, 0x87, 0xb3,
	0x47, 0xaf, 0x0f, 0xe7, 0xdb, 0x0b, 0x99, 0x77, 0x97, 0x2f, 0x1b, 0x30, 0x02, 0x86, 0x22, 0x8d,
	0x8c, 0xca, 0x7b, 0xe7, 0x3e, 0xb4, 0x61, 0xf9, 0xc3, 0xd6, 0x61, 0xd2, 0x77, 0xf8, 0x68, 0x88,
	0xa8, 0x63, 0x9b, 0xff, 0x28, 0x05, 0xd4, 0xf1, 0x6d, 0x3c, 0x20, 0xfd, 0xfb, 0xad, 0xc1, 0x41,
	0xdf, 0xe0, 0xf4, 0xdc, 0xcc, 0x7b, 0xa2, 0x23, 0x8c, 0x1e, 0x37, 0xe2, 0xd3, 0x32, 0xb4, 0x52,
	0xcf, 0x77, 0xc7, 0x35, 0x08, 0xc9, 0xb1, 0xf0, 0x1f, 0x34, 0x69, 0x44, 0xb6, 0xf5, 0xde, 0xbb,
	0x63, 0xb3, 0x2d, 0x7f, 0x34, 0x75, 0xee, 0xf6, 0xff, 0xac, 0x81, 0xd0, 0x6e, 0x33, 0xb2, 0x12,
	0xef, 0xc4, 0xdd, 0xbb, 0x5d, 0x0b, 0x65, 0x0c, 0xab, 0x42, 0xf9, 0xe3, 0x36, 0xef, 0xe7, 0x37,
	0x57, 0x47, 0x4f, 0x4d, 0xde, 0x21, 0x63, 0x5b, 0x49, 0x77, 0xaa, 0x50, 0x8b, 0x8e, 0xbf, 0xfc,
	0x5e, 0x07, 0xce, 0xf5, 0x3a, 0x70, 0xfe, 0xae, 0x03, 0xe7, 0xe7, 0x26, 0x18, 0x5c, 0x6f, 0x82,
	0xc1, 0x9f, 0x4d, 0x30, 0xf8, 0xf6, 0x36, 0xe3, 0xea, 0xa2, 0x4a, 0xe6, 0x0c, 0x73, 0xf2, 0xa9,
	0x1d, 0xed, 0xbc, 0xd9, 0x3c, 0xc3, 0x15, 0x31, 0x6f, 0xe4, 0xc7, 0x7f, 0xaf, 0xa4, 0x5e, 0x10,
	0x75, 0x59, 0x82, 0x4c, 0x46, 0xed, 0xfb, 0x78, 0xf3, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x56,
	0x73, 0xf6, 0x66, 0x03, 0x00, 0x00,
}

func (m *SuperNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupernodeAccount) > 0 {
		i -= len(m.SupernodeAccount)
		copy(dAtA[i:], m.SupernodeAccount)
		i = encodeVarintSuperNode(dAtA, i, uint64(len(m.SupernodeAccount)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSuperNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintSuperNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrevIpAddresses) > 0 {
		for iNdEx := len(m.PrevIpAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrevIpAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSuperNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Evidence) > 0 {
		for iNdEx := len(m.Evidence) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Evidence[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSuperNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.States) > 0 {
		for iNdEx := len(m.States) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.States[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSuperNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintSuperNode(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuperNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuperNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuperNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperNode(uint64(l))
	}
	if len(m.States) > 0 {
		for _, e := range m.States {
			l = e.Size()
			n += 1 + l + sovSuperNode(uint64(l))
		}
	}
	if len(m.Evidence) > 0 {
		for _, e := range m.Evidence {
			l = e.Size()
			n += 1 + l + sovSuperNode(uint64(l))
		}
	}
	if len(m.PrevIpAddresses) > 0 {
		for _, e := range m.PrevIpAddresses {
			l = e.Size()
			n += 1 + l + sovSuperNode(uint64(l))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovSuperNode(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovSuperNode(uint64(l))
	}
	l = len(m.SupernodeAccount)
	if l > 0 {
		n += 1 + l + sovSuperNode(uint64(l))
	}
	return n
}

func sovSuperNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuperNode(x uint64) (n int) {
	return sovSuperNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SuperNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States, &SuperNodeStateRecord{})
			if err := m.States[len(m.States)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = append(m.Evidence, &Evidence{})
			if err := m.Evidence[len(m.Evidence)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevIpAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevIpAddresses = append(m.PrevIpAddresses, &IPAddressHistory{})
			if err := m.PrevIpAddresses[len(m.PrevIpAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &MetricsAggregate{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupernodeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupernodeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuperNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuperNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuperNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuperNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuperNode = fmt.Errorf("proto: unexpected end of group")
)
